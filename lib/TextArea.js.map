{"version":3,"sources":["../src/TextArea.js"],"names":["TextArea","renderWithFieldContext","props","rows","cols","inputClass","placeholder","qualifiedName","fieldContext","path","formikProps","formConfig","errorMessage","errors","fieldValue","values","handleChange","handleBlur","React","Component","propTypes","name","PropTypes","string","isRequired","mode","oneOf","FieldMode","helpText","title","label","labelClass","number","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAGA;;;;;IAKMA,Q;;;;;;;;;;;;;;8LAoEFC,sB,GAAyB,wBAAgB;AAAA,8BAEW,MAAKC,KAFhB;AAAA,gBAE7BC,IAF6B,eAE7BA,IAF6B;AAAA,gBAEvBC,IAFuB,eAEvBA,IAFuB;AAAA,gBAEjBC,UAFiB,eAEjBA,UAFiB;AAAA,gBAELC,WAFK,eAELA,WAFK;AAAA,gBAG7BC,aAH6B,GAGLC,YAHK,CAG7BD,aAH6B;AAAA,gBAGdE,IAHc,GAGLD,YAHK,CAGdC,IAHc;AAAA,gBAI7BC,WAJ6B,GAIbF,aAAaG,UAJA,CAI7BD,WAJ6B;;;AAMrC,gBAAME,eAAe,sBAAIF,YAAYG,MAAhB,EAAwBJ,IAAxB,CAArB;AACA,gBAAMK,aAAa,sBAAIJ,YAAYK,MAAhB,EAAwBN,IAAxB,CAAnB;;AAEA,mBACI;AAAC,mCAAD;AAAA,6BACUD,YADV;AAEI,kCAAeI;AAFnB;AAII;AACI,+BACI,0BACIP,UADJ,EAEI,cAFJ,EAGIO,gBAAgB,YAHpB,CAFR;AAQI,0BAAOT,IARX;AASI,0BAAOC,IATX;AAUI,0BAAOG,aAVX;AAWI,2BAAQO,UAXZ;AAYI,iCAAcR,WAZlB;AAaI,8BAAWI,YAAYM,YAb3B;AAcI,4BAASN,YAAYO;AAdzB;AAJJ,aADJ;AAuBH,S;;;;;iCA9CD;AACI,mBACI;AAAC,+BAAD;AAAA,6BACS,KAAKf,KADd;AAEI,0BAAO,IAFX;AAGI,0BAAO;AAHX;AAMQ,qBAAKD;AANb,aADJ;AAWH;;;;EAlEkBiB,gBAAMC,S;;AAAvBnB,Q,CAEKoB,S,GAAY;AACf;;;AAGAC,UAAMC,oBAAUC,MAAV,CAAiBC,UAJR;AAKf;;;AAGAC,UAAMH,oBAAUI,KAAV,CAAgBC,oBAAUZ,MAAV,EAAhB,CARS;AASf;;;AAGAa,cAAUN,oBAAUC,MAZL;AAaf;;;AAGAM,WAAOP,oBAAUC,MAhBF;AAiBf;;;AAGAO,WAAOR,oBAAUC,MApBF;AAqBf;;;AAGAjB,iBAAagB,oBAAUC,MAxBR;;AA0Bf;;;AAGAlB,gBAAYiB,oBAAUC,MA7BP;;AA+Bf;;;AAGAQ,gBAAYT,oBAAUC,MAlCP;;AAoCf;;;AAGApB,UAAMmB,oBAAUU,MAvCD;AAwCf;;;AAGA5B,UAAMkB,oBAAUU;AA3CD,C;AAFjBhC,Q,CAgDKiC,Y,GAAe;AAClB9B,UAAM,CADY;AAElBC,UAAM;AAFY,C;kBAuDXJ,Q","file":"TextArea.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport FieldMode from \"./FieldMode\"\nimport FormGroup from \"./FormGroup\"\nimport Field from \"./Field\"\nimport get from \"lodash.get\";\nimport cx from \"classnames\";\n\n\n/**\n * Edits a string GraphQL field with a text area element.\n *\n * This is a good example how to implement custom fields.\n */\nclass TextArea extends React.Component {\n\n    static propTypes = {\n        /**\n         * Name / path for this field (e.g. \"name\", but also \"foos.0.name\")\n         */\n        name: PropTypes.string.isRequired,\n        /**\n         * Mode for this field. If not set or set to null, the mode will be inherited from the &lt;Form/&gt; or &lt;FormBlock&gt;.\n         */\n        mode: PropTypes.oneOf(FieldMode.values()),\n        /**\n         * Additional help text for this field. Is rendered for non-erroneous fields in place of the error.\n         */\n        helpText: PropTypes.string,\n        /**\n         * Title attribute\n         */\n        title: PropTypes.string,\n        /**\n         * Label for the field.\n         */\n        label: PropTypes.string,\n        /**\n         * Placeholder text to render for the empty text area.\n         */\n        placeholder: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the textarea element.\n         */\n        inputClass: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the label element.\n         */\n        labelClass: PropTypes.string,\n\n        /**\n         * Rows attribute for the textarea element (default is 3)\n         */\n        rows: PropTypes.number,\n        /**\n         * Cols attribute for the textarea element (default is 60)\n         */\n        cols: PropTypes.number,\n    };\n\n    static defaultProps = {\n        rows: 3,\n        cols: 60\n    };\n\n    render()\n    {\n        return (\n            <Field\n                { ...this.props }\n                rows={ null }\n                cols={ null }\n            >\n                {\n                    this.renderWithFieldContext\n                }\n            </Field>\n        )\n    }\n\n    renderWithFieldContext = fieldContext => {\n\n        const { rows, cols, inputClass, placeholder } = this.props;\n        const { qualifiedName, path } = fieldContext;\n        const { formikProps } = fieldContext.formConfig;\n\n        const errorMessage = get(formikProps.errors, path);\n        const fieldValue = get(formikProps.values, path);\n\n        return (\n            <FormGroup\n                { ... fieldContext }\n                errorMessage={ errorMessage }\n            >\n                <textarea\n                    className={\n                        cx(\n                            inputClass,\n                            \"form-control\",\n                            errorMessage && \"is-invalid\"\n                        )\n                    }\n                    rows={ rows }\n                    cols={ cols }\n                    name={ qualifiedName }\n                    value={ fieldValue }\n                    placeholder={ placeholder }\n                    onChange={ formikProps.handleChange }\n                    onBlur={ formikProps.handleBlur }\n                />\n            </FormGroup>\n        )\n    };\n}\n\nexport default TextArea\n"]}