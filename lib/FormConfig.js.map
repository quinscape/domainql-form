{"version":3,"sources":["../src/FormConfig.js"],"names":["DEFAULT_OPTIONS","horizontal","labelColumnClass","wrapperColumnClass","mode","FieldMode","NORMAL","currency","currencyAddonRight","lookupLabel","GlobalConfig","FORM_OPTION_NAMES","FORM_CONFIG_PROP_TYPES","context","React","createContext","FormConfig","opts","schema","InputSchema","options","mergeOptions","setFormContext","type","basePath","formikProps","name","nameIsDot","Error","other","otherOptions","len","length","i","a","b","newOptions","value","undefined","Consumer","Provider"],"mappings":"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","file":"FormConfig.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"proptypes\"\nimport InputSchema from \"./InputSchema\";\nimport FieldMode from \"./FieldMode\";\nimport GlobalConfig from \"./GlobalConfig\";\nimport keys from \"./util/keys\";\n\nexport const DEFAULT_OPTIONS = {\n    horizontal: true,\n    labelColumnClass: \"col-md-5\",\n    wrapperColumnClass: \"col-md-7\",\n    mode: FieldMode.NORMAL,\n    currency: \"EUR\",\n    currencyAddonRight: true,\n    lookupLabel: GlobalConfig.lookupLabel\n};\n\nimport FORM_CONFIG_PROP_TYPES from \"./FormConfigPropTypes\"\n\nconst FORM_OPTION_NAMES = keys(FORM_CONFIG_PROP_TYPES);\n\nconst context = React.createContext(null);\n\n/**\n * Encapsulates the complete configuration of a form field and is provided via React Context.\n *\n * This config is provided by <Form/>, <FormBlock/> and partially by <FormConfigProvider/>.\n *\n * <FormConfigProvider/> can provide defaults for configuration options and schema but does not actually define the\n * actual form context parts. Only the <Form/> component provides the form context parts which include the formikProps\n * object.\n *\n * <FormBlock/> can override configuration options.\n *\n * See FORM_CONFIG_PROPTYPES for a description of overridable options.\n *\n */\nclass FormConfig\n{\n    /**\n     *\n     * @param {Object} opts                     form config options\n     * @param {InputSchema|Object} [schema]     Schema (raw data or InputSchema instance)\n     */\n    constructor(opts, schema = null)\n    {\n        if (schema instanceof InputSchema)\n        {\n            this.schema = schema;\n        }\n        else\n        {\n            this.schema = schema && new InputSchema(schema);\n        }\n\n        this.options = FormConfig.mergeOptions(DEFAULT_OPTIONS, opts);\n\n        // clear form context\n        this.setFormContext(\"\", \"\", null);\n    }\n\n    /**\n     * Sets the form context part of the current form config\n     *\n     * @param {String} type         Name of the form base input type\n     * @param {String} basePath     current base path within the form\n     * @param {Object} formikProps  formik context object\n     */\n    setFormContext(type, basePath, formikProps)\n    {\n        this.type = type;\n        this.basePath = basePath;\n        this.formikProps = formikProps;\n    }\n    \n    getPath(name)\n    {\n        const nameIsDot = name === \".\";\n        const { basePath } = this;\n        if (basePath)\n        {\n            return nameIsDot ? basePath : basePath + \".\" + name;\n        }\n        else\n        {\n            if (nameIsDot)\n            {\n                throw new Error(\"'.' is only a valid name with a non-empty base-path (e.g. inside a FormList)\");\n            }\n            return name;\n        }\n    }\n\n    /**\n     * Merges two option objects and returns a new merged options object. The returned object will be filtered so\n     * that it only contains option keys defined in FORM_PROPTYPES.\n     *\n     * @param a     options A\n     * @param b     options B\n     */\n    static mergeOptions(a,b)\n    {\n        if (!b)\n        {\n            return a;\n        }\n\n        const newOptions = { };\n\n        const len = FORM_OPTION_NAMES.length;\n        for (let i = 0; i < len; i++)\n        {\n            const name = FORM_OPTION_NAMES[i];\n            let value = b[name];\n            newOptions[name] = value !== undefined ? value : a[name];\n        }\n        return newOptions;\n    }\n    \n    /**\n     * Compares this form config to another form config\n     *\n     * @param {FormConfig} other     other config\n     *\n     * @return {boolean} true if both configs are equal\n     */\n    equals(other)\n    {\n        if (other instanceof FormConfig)\n        {\n            if (\n                this.formikProps !== other.formikProps ||   // <- most common reason for inequality\n                this.schema !== other.schema ||\n                this.type !== other.type ||\n                this.basePath !== other.basePath\n            )\n            {\n                return false;\n            }\n\n            const { options } = this;\n            const { options: otherOptions } = other;\n\n\n            const len = FORM_OPTION_NAMES.length;\n            for (let i = 0; i < len; i++)\n            {\n                const name = FORM_OPTION_NAMES[i];\n                if (options[name] !== otherOptions[name])\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Internal React Consumer for FormConfig\n     * @type {ReactElement}\n     */\n    static Consumer = context.Consumer;\n\n    /**\n     * Internal React Provider for FormConfig. Users should use <FormConfigProvider/>, not <FormConfig.Provider/>\n     * @type {ReactElement}\n     */\n    static Provider = context.Provider;\n}\n\nexport default FormConfig\n"]}