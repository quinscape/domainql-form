{"version":3,"sources":["../src/GQLList.js"],"names":["GQLList","state","selectedIndex","selectRow","setState","index","renderWithFormContext","props","name","keyField","emptyText","children","path","formContext","getPath","process","env","NODE_ENV","fieldType","inputSchema","resolveType","type","Error","JSON","stringify","array","context","formik","values","len","length","last","renderToolbar","arrayHelpers","map","elem","isActive","label","ev","preventDefault","renderRowToolbar","createLineContext","rows","Array","i","renderRow","newObject","addLabel","canAdd","extraToolbar","push","mode","FormContext","options","basePath","horizontal","canRemove","canSort","removeCheck","swap","confirm","remove","React","Component","propTypes","PropTypes","string","isRequired","oneOf","FieldMode","bool","oneOfType","func","defaultProps"],"mappings":"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","file":"GQLList.js","sourcesContent":["import React from \"react\"\nimport cx from \"classnames\"\nimport PropTypes from \"prop-types\"\n\nimport FieldMode from \"./FieldMode\"\nimport { FormGroup } from \"./default-renderers\"\n\n\nimport {\n    FormContext,\n    GQLFormContext\n} from \"./Form\"\n\nimport toPath from \"lodash.topath\"\nimport get from \"lodash.get\"\n\nimport {\n    isListType,\n    unwrapNonNull\n} from \"./InputSchema\"\nimport { FieldArray } from \"formik\";\n\n\nclass GQLList extends React.Component {\n\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        mode: PropTypes.oneOf(FieldMode.values()),\n        canRemove: PropTypes.bool,\n        canSort: PropTypes.bool,\n        addLabel: PropTypes.string,\n        removeCheck: PropTypes.string,\n\n        // triggers alternate list view: row selector and single row form\n        keyField: PropTypes.oneOfType([\n\n            // field name/path within the array element type\n            PropTypes.string,\n            // function that renders the description for the array element\n            PropTypes.func\n        ]),\n\n        // optional factory method to produce new values\n        newObject: PropTypes.func,\n        // render additional elements into the list toolbar\n        renderToolbar: PropTypes.func,\n        // render additional elements into the per row toolbars\n        renderRowToolbar: PropTypes.func,\n\n    };\n\n    state = {\n        selectedIndex: 0\n    };\n\n    static defaultProps = {\n        canRemove: true,\n        canSort: true,\n        addLabel : \"Add Object\",\n        removeCheck : \"Delete Row?\",\n        emptyText: \"No Rows\"\n    };\n\n    render()\n    {\n        return (\n            <GQLFormContext.Consumer>\n                {\n                    this.renderWithFormContext\n                }\n            </GQLFormContext.Consumer>\n        )\n    }\n\n    selectRow = index => this.setState({\n            selectedIndex: index\n        });\n\n    renderWithFormContext = formContext => {\n\n        const { name, keyField, emptyText, children } = this.props;\n\n        const path = toPath(formContext.getPath(name));\n\n        // check type in development\n        if (process.env.NODE_ENV !== \"production\")\n        {\n            const fieldType = formContext.inputSchema.resolveType(formContext.type, path);\n\n            if (!isListType(unwrapNonNull(fieldType)))\n            {\n                throw new Error(\"GQLList expected 'List' type: is \" + JSON.stringify(fieldType))\n            }\n        }\n\n        const array = get(this.context.formik.values, path);\n        const len = array.length;\n        const last = len - 1;\n\n        return (\n            <FieldArray\n                name={ name }\n                render={\n                    arrayHelpers => {\n\n\n                        if (keyField)\n                        {\n                            const { selectedIndex } = this.state;\n\n                            return (\n                                <React.Fragment>\n                                    {\n                                        this.renderToolbar(formContext, arrayHelpers)\n                                    }\n                                    <div className=\"row\">\n                                        <div className=\"col-md-3\">\n                                            {\n                                                len > 0 &&\n                                                <ul className=\"list-group\">\n                                                    {\n                                                        array.map(\n                                                            (elem,index) => {\n\n                                                                const isActive = index === selectedIndex;\n\n                                                                const label = typeof keyField === \"function\" ? keyField(elem) : get(elem, toPath(keyField));\n                                                                return (\n                                                                    <li\n                                                                        key={index}\n                                                                        className={cx(\"list-group-item\", isActive && \"active\")}\n                                                                    >\n                                                                        <a\n                                                                            className={ cx(\"btn btn-link\", isActive && \"disabled\") }\n                                                                            aria-disabled={ isActive }\n                                                                            onClick={ ev => {\n                                                                                this.selectRow(index);\n                                                                                ev.preventDefault();\n                                                                            }}\n                                                                        >\n                                                                            {\n                                                                                label\n                                                                            }\n                                                                        </a>\n                                                                        <div className=\"float-right\">\n                                                                            {\n                                                                                this.renderRowToolbar(arrayHelpers, index, last)\n                                                                            }\n                                                                        </div>\n                                                                    </li>\n                                                                );\n                                                            }\n                                                        )\n                                                    }\n                                                </ul>\n                                            }\n                                            {\n                                                len === 0 &&\n                                                <React.Fragment>\n                                                    { emptyText }\n                                                    <hr/>\n                                                </React.Fragment>\n                                            }\n                                        </div>\n                                        {\n                                            selectedIndex < len &&\n                                            <GQLFormContext.Provider\n                                                key={ selectedIndex }\n                                                value={ this.createLineContext(formContext, selectedIndex, path) }\n                                            >\n                                                <div className=\"col-md-9\">\n                                                    <div className=\"container-fluid\">\n                                                        {\n                                                            typeof children === \"function\" ? children(selectedIndex, arrayHelpers) : children\n                                                        }\n                                                    </div>\n\n                                                </div>\n                                            </GQLFormContext.Provider>\n                                        }\n                                    </div>\n                                </React.Fragment>\n                            );\n                        }\n                        else\n                        {\n                            const rows = new Array(len);\n                            for (let i = 0; i < len; i++)\n                            {\n                                rows[i] = this.renderRow(formContext, arrayHelpers, i, len - 1, path)\n                            }\n                            return (\n                                <React.Fragment>\n                                    {\n                                        this.renderToolbar(formContext, arrayHelpers)\n                                    }\n                                    {\n                                        rows\n                                    }\n                                    {\n                                        len === 0 &&\n                                        <React.Fragment>\n                                            { emptyText }\n                                            <hr/>\n                                        </React.Fragment>\n                                    }\n                                </React.Fragment>\n                            );\n                        }\n                    }\n                }\n            />\n        )\n    };\n\n    renderToolbar(formContext, arrayHelpers)\n    {\n        const { newObject, addLabel, renderToolbar } = this.props;\n\n        const canAdd = typeof newObject === \"function\";\n        const extraToolbar = typeof renderToolbar === \"function\";\n\n        return (\n            <React.Fragment>\n                {\n                    (canAdd || extraToolbar) &&\n                    <div className=\"btn-toolbar\">\n                        {\n                            canAdd &&\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-default\"\n                                onClick={ev => arrayHelpers.push(newObject())}\n                            >\n                                <i className=\"fas fa-plus\"></i>\n                                {\" \" + addLabel}\n                            </button>\n                        }\n                        {\n                            extraToolbar && renderToolbar(formContext, arrayHelpers)\n                        }\n                    </div>\n                }\n                {\n                    (canAdd || extraToolbar) && <hr/>\n                }\n            </React.Fragment>\n        );\n    }\n\n    createLineContext(formContext, index, path)\n    {\n        const { mode } = this.props;\n        const { inputSchema, type } = formContext;\n\n        return new FormContext(\n            inputSchema,\n            type,\n            mode || formContext.mode,\n            {\n                ...formContext.options,\n                basePath: path + \".\" + index,\n                horizontal: true\n            }\n        );\n\n    }\n\n    renderRow(formContext, arrayHelpers, index, last, path)\n    {\n        const { children } = this.props;\n\n        return (\n            <GQLFormContext.Provider\n                key={ index }\n                value={ this.createLineContext(formContext, index, path) }\n            >\n                <div className=\"form-row\">\n                    <div className=\"col-md-9\">\n                        <div className=\"container-fluid\">\n                            {\n                                typeof children === \"function\" ? children(index, arrayHelpers) : children\n                            }\n                        </div>\n                    </div>\n                    <div className=\"col-md-3\">\n                        {\n                            this.renderRowToolbar(arrayHelpers, index, last )\n                        }\n                    </div>\n                </div>\n                <hr/>\n            </GQLFormContext.Provider>\n        );\n    }\n\n    renderRowToolbar(arrayHelpers, index,last)\n    {\n        const { canRemove, canSort, removeCheck, renderRowToolbar } = this.props;\n\n        return (\n            <React.Fragment>\n                {\n                    renderRowToolbar && renderRowToolbar(arrayHelpers, index, last)\n                }\n                {\n                    canSort &&\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"Sort Buttons\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-link\"\n                            aria-label=\"Move Item Up\"\n                            onClick={ ev => arrayHelpers.swap(index, index - 1) }\n                            disabled={ index === 0 }\n                        >\n                            <i className=\"fas fa-arrow-up\"></i>\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-link\"\n                            onClick={ ev => arrayHelpers.swap(index, index + 1) }\n                            aria-label=\"Move Item Down\"\n                            disabled={ index === last }\n                        >\n                            <i className=\"fas fa-arrow-down\"></i>\n                        </button>\n                    </div>\n                }\n                {\n                    canRemove &&\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-link\"\n                        aria-label=\"Remove Row\"\n                        onClick={ ev => { if ( confirm(removeCheck) ) arrayHelpers.remove(index) } }\n                    >\n                        <i className=\"fas fa-times\"></i>\n                    </button>\n\n                }\n            </React.Fragment>\n\n        )\n    }\n\n\n}\n\nexport default GQLList\n"]}