{"version":3,"sources":["../../src/util/parse-number.js"],"names":["clean","value","BigNumber","config","FORMAT","decimalSeparator","groupSeparator","fractionGroupSeparator","decimalPos","indexOf","substring","RE","c","regex","RegExp","replace"],"mappings":";;;;;QAIgBA,K,GAAAA,K;;kBAqBD,UAAUC,KAAV,EACf;AAAA,gCACyEC,oBAAUC,MAAV,GAAmBC,MAD5F;AAAA,QACYC,gBADZ,yBACYA,gBADZ;AAAA,QAC8BC,cAD9B,yBAC8BA,cAD9B;AAAA,QAC8CC,sBAD9C,yBAC8CA,sBAD9C;;AAGI,QAAMC,aAAaP,MAAMQ,OAAN,CAAcJ,gBAAd,CAAnB;AACA,QAAIG,aAAa,CAAjB,EACA;AACI,eAAO,IAAIN,mBAAJ,CAAeF,MAAMC,KAAN,EAAaK,cAAb,CAAf,CAAP;AACH,KAHD,MAKA;AACI,eAAO,IAAIJ,mBAAJ,CAAeF,MAAMC,MAAMS,SAAN,CAAgB,CAAhB,EAAmBF,UAAnB,CAAN,EAAsCF,cAAtC,IAAwD,GAAxD,GAA8DN,MAAMC,MAAMS,SAAN,CAAgBF,aAAa,CAA7B,CAAN,EAAuCD,sBAAvC,CAA7E,CAAP;AACH;AACJ,C;;AAtCD;;;;;;AAEA,IAAMI,KAAK,EAAX;;AAEO,SAASX,KAAT,CAAeC,KAAf,EAAsBW,CAAtB,EACP;AACI,QAAI,CAACA,CAAL,EACA;AACI,eAAOX,KAAP;AACH;;AAED,QAAIY,QAAQF,GAAGC,CAAH,CAAZ;AACA,QAAI,CAACC,KAAL,EACA;AACIA,gBAAQF,GAAGC,CAAH,IAAQ,IAAIE,MAAJ,CAAW,OAAOF,CAAlB,EAAqB,GAArB,CAAhB;AACH;AACD,WAAOX,MAAMc,OAAN,CAAcF,KAAd,EAAqB,EAArB,CAAP;AACH;;AAED","file":"parse-number.js","sourcesContent":["import BigNumber from \"bignumber.js\"\n\nconst RE = {};\n\nexport function clean(value, c)\n{\n    if (!c)\n    {\n        return value;\n    }\n\n    let regex = RE[c];\n    if (!regex)\n    {\n        regex = RE[c] = new RegExp(\"\\\\\" + c, \"g\");\n    }\n    return value.replace(regex, \"\");\n}\n\n/**\n * Parses the given formatted number string by cleaning it up using the current BigNumber configuration before\n * creating the BigNumber instance\n *\n * @param value\n */\nexport default function (value)\n{\n    const { decimalSeparator, groupSeparator, fractionGroupSeparator } = BigNumber.config().FORMAT;\n\n    const decimalPos = value.indexOf(decimalSeparator);\n    if (decimalPos < 0)\n    {\n        return new BigNumber( clean(value, groupSeparator) );\n    }\n    else\n    {\n        return new BigNumber( clean(value.substring(0, decimalPos), groupSeparator) + \".\" + clean(value.substring(decimalPos + 1), fractionGroupSeparator) );\n    }\n}\n"]}