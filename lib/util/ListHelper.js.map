{"version":3,"sources":["../../src/util/ListHelper.js"],"names":["Icon","props","className","ListHelper","renderToolbar","arrayHelpers","newObject","addLabel","formConfig","canAdd","extraToolbar","push","createLineContext","index","path","lineConfig","FormConfig","mergeOptions","options","schema","setFormContext","type","formikProps","renderRowToolbar","last","canRemove","canSort","removeCheck","minObjects","swap","confirm","remove","name","children","getPath","__DEV","fieldType","resolveType","Error","JSON","stringify","array","values","React","Component"],"mappings":"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","file":"ListHelper.js","sourcesContent":["import React from \"react\"\nimport FormConfig from \"../FormConfig\"\nimport withFormConfig from \"../withFormConfig\"\n\nimport toPath from \"lodash.topath\"\nimport get from \"lodash.get\"\n\nimport {\n    isListType,\n    unwrapNonNull\n} from \"../InputSchema\"\n\nimport { FieldArray } from \"formik\";\n\n\nfunction Icon(props)\n{\n    const { className } = props;\n\n    return (\n        <i className={ \"fas \" + className }/>\n    );\n}\n\n/**\n * List helper component used by <FormList/> and <FormSelector/>. Uses a\n */\nclass ListHelper extends React.Component {\n\n    renderToolbar = (arrayHelpers) =>\n    {\n        const { newObject, addLabel, renderToolbar, formConfig } = this.props;\n\n        const canAdd = typeof newObject === \"function\";\n        const extraToolbar = typeof renderToolbar === \"function\";\n\n        return (\n            <React.Fragment>\n                {\n                    (canAdd || extraToolbar) &&\n                    <div className=\"btn-toolbar\">\n                        {\n                            canAdd &&\n                            <button\n                                type=\"button\"\n                                className=\"b-add btn btn-default\"\n                                onClick={ev => arrayHelpers.push(newObject())}\n                            >\n                                <Icon className=\"fa-plus\"/>\n                                {\" \" + addLabel}\n                            </button>\n                        }\n                        {\n                            extraToolbar && renderToolbar(formConfig, arrayHelpers)\n                        }\n                    </div>\n                }\n                {\n                    (canAdd || extraToolbar) && <hr/>\n                }\n            </React.Fragment>\n        );\n    };\n\n    createLineContext = ( index, path) =>\n    {\n        const { formConfig } = this.props;\n\n        const lineConfig = new FormConfig(\n            FormConfig.mergeOptions(formConfig.options, this.props),\n            formConfig.schema\n        );\n\n        lineConfig.setFormContext(\n            formConfig.type,\n            path + \".\" + index,\n            formConfig.formikProps\n        );\n\n        return lineConfig;\n    };\n\n    renderRowToolbar = (arrayHelpers, index, last) =>\n    {\n        const { canRemove, canSort, removeCheck, renderRowToolbar, minObjects } = this.props;\n\n        return (\n            <React.Fragment>\n                {\n                    renderRowToolbar && renderRowToolbar(arrayHelpers, index, last)\n                }\n                {\n                    canSort &&\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"Sort Buttons\">\n                        <button\n                            type=\"button\"\n                            className=\"b-up btn btn-link\"\n                            aria-label=\"Move Item Up\"\n                            onClick={ ev => arrayHelpers.swap(index, index - 1) }\n                            disabled={ index === 0 }\n                        >\n                            <Icon className=\"fa-arrow-up\"/>\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"b-down btn btn-link\"\n                            onClick={ ev => arrayHelpers.swap(index, index + 1) }\n                            aria-label=\"Move Item Down\"\n                            disabled={ index === last }\n                        >\n                            <Icon className=\"fa-arrow-down\"/>\n                        </button>\n                    </div>\n                }\n                {\n                    canRemove && minObjects <= last &&\n                    <button\n                        type=\"button\"\n                        className=\"b-remove btn btn-link\"\n                        aria-label=\"Remove Row\"\n                        onClick={ ev => { if ( confirm(removeCheck) ) arrayHelpers.remove(index) } }\n                    >\n                        <Icon className=\"fa-times\"/>\n                    </button>\n\n                }\n            </React.Fragment>\n        )\n    };\n\n    render()\n    {\n        const { name, children, formConfig } = this.props;\n\n        const path = toPath(formConfig.getPath(name));\n\n        // check type in development\n        if (__DEV)\n        {\n            const fieldType = formConfig.schema.resolveType(formConfig.type, path);\n\n            if (!isListType(unwrapNonNull(fieldType)))\n            {\n                throw new Error(\"FormList expected 'List' type: is \" + JSON.stringify(fieldType))\n            }\n        }\n\n        const array = get(formConfig.formikProps.values, path);\n\n        return (\n            <FieldArray\n                name={ name }\n                render={\n                    arrayHelpers =>\n                        children(\n                            {\n                                array,\n                                path,\n                                arrayHelpers,\n                                renderRowToolbar: this.renderRowToolbar,\n                                renderToolbar: this.renderToolbar,\n                                createLineContext: this.createLineContext\n                            }\n                        )\n                }\n            />\n        );\n    };\n}\n\nexport default withFormConfig(ListHelper)\n"]}