{"version":3,"sources":["../src/FormList.js"],"names":["FormList","props","emptyText","children","ctx","array","path","arrayHelpers","renderToolbar","renderRowToolbar","createLineContext","len","length","last","rows","Array","index","React","Component","propTypes","name","PropTypes","string","isRequired","canRemove","bool","canSort","addLabel","removeCheck","minObjects","number","newObject","func","horizontal","FORM_CONFIG_PROP_TYPES","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAGA;;;IAGMA,Q;;;;;;;;;;;iCAyEF;AAAA,yBACoC,KAAKC,KADzC;AAAA,gBACYC,SADZ,UACYA,SADZ;AAAA,gBACuBC,QADvB,UACuBA,QADvB;;;AAGI,mBACI;AAAC,oCAAD;AACU,qBAAKF,KADf;AAIQ,0BAACG,GAAD,EAAS;AAAA,wBAEGC,KAFH,GAEmFD,GAFnF,CAEGC,KAFH;AAAA,wBAEUC,IAFV,GAEmFF,GAFnF,CAEUE,IAFV;AAAA,wBAEeC,YAFf,GAEmFH,GAFnF,CAEeG,YAFf;AAAA,wBAE6BC,aAF7B,GAEmFJ,GAFnF,CAE6BI,aAF7B;AAAA,wBAE4CC,gBAF5C,GAEmFL,GAFnF,CAE4CK,gBAF5C;AAAA,wBAE8DC,iBAF9D,GAEmFN,GAFnF,CAE8DM,iBAF9D;;;AAIL,wBAAMC,MAAMN,MAAMO,MAAlB;AACA,wBAAMC,OAAOF,MAAM,CAAnB;;AAEA,wBAAMG,OAAO,IAAIC,KAAJ,CAAUJ,GAAV,CAAb;;AAEA,yBAAK,IAAIK,QAAQ,CAAjB,EAAoBA,QAAQL,GAA5B,EAAiCK,OAAjC,EACA;AACIF,6BAAKE,KAAL,IACI;AAAC,gDAAD,CAAY,QAAZ;AAAA;AACI,qCAAMA,KADV;AAEI,uCAAQN,kBAAkBM,KAAlB,EAAyBV,IAAzB;AAFZ;AAII;AAAA;AAAA,kCAAK,WAAU,UAAf;AACI;AAAA;AAAA,sCAAK,WAAU,UAAf;AACI;AAAA;AAAA,0CAAK,WAAU,iBAAf;AAEQ,+CAAOH,QAAP,KAAoB,UAApB,GAAiCA,SAASa,KAAT,EAAgBT,YAAhB,CAAjC,GAAiEJ;AAFzE;AADJ,iCADJ;AAQI;AAAA;AAAA,sCAAK,WAAU,UAAf;AAEQM,qDAAiBF,YAAjB,EAA+BS,KAA/B,EAAsCH,IAAtC;AAFR;AARJ,6BAJJ;AAkBI;AAlBJ,yBADJ;AAsBH;;AAED,2BACI;AAAA;AAAA,0BAAK,WAAU,WAAf;AAEQL,sCAAcD,YAAd,CAFR;AAKQO,4BALR;AAQQH,gCAAQ,CAAR,IACA;AAAC,2CAAD,CAAO,QAAP;AAAA;AACMT,qCADN;AAEI;AAFJ;AATR,qBADJ;AAiBH;AAxDT,aADJ;AA6DH;;;;EAzIkBe,gBAAMC,S;;AAAvBlB,Q,CAEKmB,S;;AAEH;;;AAGAC,UAAMC,oBAAUC,MAAV,CAAiBC,U;;AAEvB;;;;AAIAC,eAAWH,oBAAUI,I;;AAErB;;;AAGAC,aAASL,oBAAUI,I;;AAEnB;;;AAGAE,cAAUN,oBAAUC,M;AACpB;;;AAGAM,iBAAaP,oBAAUC,M;AACvB;;;AAGAO,gBAAYR,oBAAUS,M;;AAEtB;;;;AAIAC,eAAWV,oBAAUW,I;AACrB;;;AAGAxB,mBAAea,oBAAUW,I;AACzB;;;AAGAvB,sBAAkBY,oBAAUW,I;;AAE5B;;;AAGA9B,eAAWmB,oBAAUC,M;;AAErB;;;AAGAW,gBAAYZ,oBAAUC;;GAElBY,6B;AAzDNlC,Q,CA4DKmC,Y,GAAe;AAClBX,eAAW,IADO;AAElBE,aAAS,IAFS;AAGlBG,gBAAY,CAHM;AAIlBF,cAAW,YAJO;AAKlBC,iBAAc,aALI;AAMlB1B,eAAW,SANO;;AAQlB;AACA+B,gBAAY;AATM,C;kBAgFXjC,Q","file":"FormList.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport ListHelper from \"./util/ListHelper\";\nimport FormConfig from \"./FormConfig\"\nimport FORM_CONFIG_PROP_TYPES from \"./FormConfigPropTypes\"\n\n\n/**\n * Helper to render a list of inputs. Both a list of scalar values as well as a list of complex input objects is supported.\n */\nclass FormList extends React.Component {\n\n    static propTypes = {\n\n        /**\n         * Name/path of the list field for this &lt;FormList/&gt;\n         */\n        name: PropTypes.string.isRequired,\n\n        /**\n         * If true (the default), the user can remove objects as long as there are more than \"minObjects\" objects. If false\n         * the user can never remove objects.\n         */\n        canRemove: PropTypes.bool,\n\n        /**\n         * If true (the default), the user can sort the list of objects with up and down buttons for each object.\n         */\n        canSort: PropTypes.bool,\n\n        /**\n         * Label to put on the add button (default is \"Add\")\n         */\n        addLabel: PropTypes.string,\n        /**\n         * Text of the remove object confirmation (default is \"Remove Object?\")\n         */\n        removeCheck: PropTypes.string,\n        /**\n         * Mininum number of objects in the list. (default is 0)\n         */\n        minObjects: PropTypes.number,\n\n        /**\n         * optional factory method to produce new values. If no newObject prop is given, the user cannot add objects\n         * to the list.\n         */\n        newObject: PropTypes.func,\n        /**\n         * render additional elements into the list toolbar\n         */\n        renderToolbar: PropTypes.func,\n        /**\n         * render additional elements into the per row toolbars\n         */\n        renderRowToolbar: PropTypes.func,\n\n        /**\n         * Text to render if no rows are rendered.\n         */\n        emptyText: PropTypes.string,\n\n        /**\n         * Horizontal mode (default is true)\n         */\n        horizontal: PropTypes.string,\n\n        ... FORM_CONFIG_PROP_TYPES\n    };\n\n    static defaultProps = {\n        canRemove: true,\n        canSort: true,\n        minObjects: 0,\n        addLabel : \"Add Object\",\n        removeCheck : \"Delete Row?\",\n        emptyText: \"No Rows\",\n\n        // we use horizontal mode as non-inherited default in FormList.\n        horizontal: true\n    };\n\n    render()\n    {\n        const { emptyText, children } = this.props;\n\n        return (\n            <ListHelper\n                { ... this.props }\n            >\n                {\n                    (ctx) => {\n\n                        const { array, path,arrayHelpers, renderToolbar, renderRowToolbar, createLineContext} = ctx;\n\n                        const len = array.length;\n                        const last = len - 1;\n\n                        const rows = new Array(len);\n\n                        for (let index = 0; index < len; index++)\n                        {\n                            rows[index] = (\n                                <FormConfig.Provider\n                                    key={ index }\n                                    value={ createLineContext(index, path) }\n                                >\n                                    <div className=\"form-row\">\n                                        <div className=\"col-md-9\">\n                                            <div className=\"container-fluid\">\n                                                {\n                                                    typeof children === \"function\" ? children(index, arrayHelpers) : children\n                                                }\n                                            </div>\n                                        </div>\n                                        <div className=\"col-md-3\">\n                                            {\n                                                renderRowToolbar(arrayHelpers, index, last )\n                                            }\n                                        </div>\n                                    </div>\n                                    <hr/>\n                                </FormConfig.Provider>\n                            );\n                        }\n\n                        return (\n                            <div className=\"form-list\">\n                                {\n                                    renderToolbar(arrayHelpers)\n                                }\n                                {\n                                    rows\n                                }\n                                {\n                                    len === 0 &&\n                                    <React.Fragment>\n                                        { emptyText }\n                                        <hr/>\n                                    </React.Fragment>\n                                }\n                            </div>\n                        );\n                    }\n                }\n            </ListHelper>\n        );\n    }\n}\n\nexport default FormList\n"]}