{"version":3,"sources":["../src/default-converters.js"],"names":["BOOLEAN_RE","DATE_RE","INTEGER_RE","checkInteger","lower","upper","msg","value","num","isNaN","test","checkRegexp","re","CURRENCY_MULTIPLIER","CURRENCY_LIMIT_LOW","Number","MIN_SAFE_INTEGER","CURRENCY_LIMIT_HIGH","MAX_SAFE_INTEGER","DEFAULT_CONVERTERS","validate","BigNumber","config","FORMAT","decimalSeparator","groupSeparator","fractionGroupSeparator","decimalPos","indexOf","substring","scalarToValue","scalar","toFormat","valueToScalar","bigNum","times","toNumber","String"],"mappings":"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","file":"default-converters.js","sourcesContent":["import BigNumber from \"bignumber.js\"\nimport parseNumber, { clean } from \"./util/parse-number\"\n\nconst BOOLEAN_RE = /^true|false$/;\n\nconst DATE_RE = /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/;\n\nconst INTEGER_RE = /^-?[0-9]*$/;\n\nfunction checkInteger(lower, upper, msg)\n{\n    return function (value) {\n        const num = +value;\n        if (isNaN(num) || !INTEGER_RE.test(value) || num < lower || num > upper)\n        {\n            return msg;\n        }\n        return null;\n    }\n}\n\nfunction checkRegexp(re, msg)\n{\n    return function (value) {\n        if (!re.test(value))\n        {\n            return msg;\n        }\n        return null;\n    };\n}\n\nexport const CURRENCY_MULTIPLIER = 10000;\n\nconst CURRENCY_LIMIT_LOW = Number.MIN_SAFE_INTEGER / CURRENCY_MULTIPLIER;\nconst CURRENCY_LIMIT_HIGH = Number.MAX_SAFE_INTEGER / CURRENCY_MULTIPLIER;\n\nconst DEFAULT_CONVERTERS = {\n    \"String\" : false,\n    // formik uses boolean values\n    \"Boolean\" : false,\n    \"Currency\" : {\n        validate: function (value) {\n\n            const { decimalSeparator, groupSeparator, fractionGroupSeparator } = BigNumber.config().FORMAT;\n\n            const decimalPos = value.indexOf(decimalSeparator);\n\n            let num;\n            if (decimalPos < 0)\n            {\n                num = +clean(value, groupSeparator);\n            }\n            else\n            {\n                num = +(\n                    clean(\n                        value.substring(0, decimalPos),\n                        groupSeparator\n                    ) + \".\" +\n                    clean(\n                        value.substring(decimalPos + 1),\n                        fractionGroupSeparator\n                    )\n                );\n            }\n            if (isNaN(num) || num < CURRENCY_LIMIT_LOW || num > CURRENCY_LIMIT_HIGH)\n            {\n                return \"Invalid currency value\";\n            }\n            return null;\n        },\n\n        scalarToValue: function (scalar) {\n            return new BigNumber(scalar / CURRENCY_MULTIPLIER).toFormat(2);\n        },\n        valueToScalar: function (value) {\n            const bigNum = parseNumber(value);\n            return bigNum.times(CURRENCY_MULTIPLIER).toNumber();\n        }\n    },\n    \"Byte\" : {\n        validate: checkInteger(-128, 127, \"Invalid Byte\"),\n\n        scalarToValue: function (scalar) {\n            return String(scalar)\n        },\n        valueToScalar: function (value) {\n            return +value\n        }\n    },\n    \"Short\" : {\n        validate: checkInteger(-32768, 32768, \"Invalid Short\"),\n\n        scalarToValue: function (scalar) {\n            return String(scalar)\n        },\n        valueToScalar: function (value) {\n            return +value\n        }\n    },\n    \"Int\" : {\n        validate: checkInteger(-2147483648, 2147483647, \"Invalid Integer\"),\n\n        scalarToValue: function (scalar) {\n            return String(scalar)\n        },\n        valueToScalar: function (value) {\n            return +value\n        }\n    },\n    \"Long\" : {\n        validate: checkInteger(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, \"Invalid Long\"),\n\n        scalarToValue: function (scalar) {\n            return String(scalar)\n        },\n        valueToScalar: function (value) {\n            return +value\n        }\n    },\n    \"Date\" : {\n        validate: checkRegexp(DATE_RE),\n\n        scalarToValue: function (scalar) {\n            return String(scalar)\n        },\n        valueToScalar: function (value) {\n            return +value\n        }\n    },\n    \"Timestamp\" : {\n        validate: checkRegexp(DATE_RE),\n\n        scalarToValue: function (scalar) {\n            return String(scalar)\n        },\n        valueToScalar: function (value) {\n            return +value\n        }\n    }\n};\n\nexport default DEFAULT_CONVERTERS;\n"]}