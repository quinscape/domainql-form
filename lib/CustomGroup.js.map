{"version":3,"sources":["../src/CustomGroup.js"],"names":["count","CustomGroup","state","fieldId","props","id","renderWithFieldContext","label","labelClass","children","Error","fieldContext","React","Component","propTypes","PropTypes","string","isRequired","func","defaultProps","rows","columns"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAIA,QAAQ,CAAZ;;AAEA;;;;;IAIMC,W;;;;;;;;;;;;;;oMAYFC,K,GAAQ;AACJC,qBAAU,MAAKC,KAAL,CAAWC,EAAX,IAAiB,YAAYL;AADnC,S,QAwBRM,sB,GAAyB,wBAAgB;AAAA,8BAEG,MAAKF,KAFR;AAAA,gBAE7BG,KAF6B,eAE7BA,KAF6B;AAAA,gBAEtBC,UAFsB,eAEtBA,UAFsB;AAAA,gBAEVC,QAFU,eAEVA,QAFU;;;AAIrC,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EACA;AACI,sBAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAED,mBACI;AAAC,mCAAD;AAAA,6BACUC,YADV;AAEI,2BAAQJ,KAFZ;AAGI,gCAAaC;AAHjB;AAMQC,yBAASE,YAAT;AANR,aADJ;AAWH,S;;;;;iCAlCD;AACI,mBACI;AAAC,+BAAD;AAAA,6BACS,KAAKP,KADd;AAEI,wBAAK,KAAKF,KAAL,CAAWC,OAFpB;AAGI,0BAAK;AAHT;AAMQ,qBAAKG;AANb,aADJ;AAWH;;;;EAlCqBM,gBAAMC,S;;AAA1BZ,W,CAEKa,S,GAAY;AACf;AACAP,WAAOQ,oBAAUC,MAAV,CAAiBC,UAFT;AAGfR,cAAUM,oBAAUG,IAAV,CAAeD,UAHV;AAIf;AACAZ,QAAIU,oBAAUC,MALC;AAMf;AACAR,gBAAYO,oBAAUC;AAPP,C;AAFjBf,W,CAgBKkB,Y,GAAe;AAClBC,UAAM,CADY;AAElBC,aAAS;AAFS,C;kBA2CXpB,W","file":"CustomGroup.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport FormGroup from \"./FormGroup\"\nimport Field from \"./Field\"\n\nlet count = 0;\n\n/**\n * Custom form group to render arbitrary content encapsulated by a form group with label. If you need an actual\n * custom input, use Field in your own component. (see e.g. TextArea as an example of a custom field)\n */\nclass CustomGroup extends React.Component {\n\n    static propTypes = {\n        // label text\n        label: PropTypes.string.isRequired,\n        children: PropTypes.func.isRequired,\n        // optional field id\n        id: PropTypes.string,\n        // optional label class\n        labelClass: PropTypes.string\n    };\n\n    state = {\n        fieldId : this.props.id || \"custom-\" + count++\n    };\n\n    static defaultProps = {\n        rows: 5,\n        columns: 60\n    };\n\n    render()\n    {\n        return (\n            <Field\n                { ...this.props }\n                id={ this.state.fieldId }\n                name=\"\"\n            >\n                {\n                    this.renderWithFieldContext\n                }\n            </Field>\n        )\n    }\n\n    renderWithFieldContext = fieldContext => {\n\n        const { label, labelClass, children } = this.props;\n\n        if (typeof children !== \"function\")\n        {\n            throw new Error(\"GQLCustomGroup expects a single function child\")\n        }\n\n        return (\n            <FormGroup\n                { ... fieldContext }\n                label={ label }\n                labelClass={ labelClass }\n            >\n                {\n                    children(fieldContext)\n                }\n            </FormGroup>\n        );\n    };\n}\n\nexport default CustomGroup\n"]}