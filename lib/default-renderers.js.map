{"version":3,"sources":["../src/default-renderers.js"],"names":["renderStatic","fieldType","inputClass","fieldValue","scalarType","staticRenderer","name","InputSchema","valueToScalar","DEFAULT_RENDERERS","rule","render","mode","ctx","formConfig","fieldId","label","labelClass","title","path","qualifiedName","formikProps","values","effectiveMode","options","checkBoxElement","FieldMode","READ_ONLY","handleChange","handleBlur","DISABLED","kind","placeholder","errorMessage","errors","fieldElement","actualType","enumType","schema","getType","enumValues","map","enumValue","currency","currencyAddonRight","modeFromOptions"],"mappings":"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","file":"default-renderers.js","sourcesContent":["import React from \"react\"\nimport cx from \"classnames\"\n\nimport FieldMode from \"./FieldMode\"\nimport InputSchema, { unwrapNonNull } from \"./InputSchema\"\nimport { resolveStaticRenderer } from \"./GlobalConfig\"\n\nimport get from \"lodash.get\"\n\nimport FormGroup from \"./FormGroup\"\n\n\nfunction renderStatic(fieldType, inputClass, fieldValue)\n{\n    const scalarType = unwrapNonNull(fieldType);\n\n    const staticRenderer = resolveStaticRenderer(scalarType.name);\n\n    return (\n        <p className={\n                cx(\n                    inputClass,\n                    \"form-control-plaintext\"\n                )\n            }\n        >\n            {\n                staticRenderer(\n                    InputSchema.valueToScalar(\n                        scalarType.name,\n                        fieldValue\n                    )\n                )\n            }\n        </p>\n    );\n}\n\n/**\n * Default rule set.\n */\nconst DEFAULT_RENDERERS =\n    [\n        {\n            rule: { fieldType: \"Boolean\" },\n\n            // CHECKBOX\n\n            render: ctx => {\n\n                const { mode, formConfig, fieldId, inputClass, label, labelClass, title, path, qualifiedName } = ctx;\n\n                const { formikProps } = formConfig;\n\n                const fieldValue = get(formikProps.values, path);\n\n                const effectiveMode = mode || formConfig.options.mode;\n\n                //console.log(\"checkbox value = \", fieldValue);\n\n                let checkBoxElement;\n\n                if (effectiveMode === FieldMode.READ_ONLY)\n                {\n                    const staticRenderer = resolveStaticRenderer(\"Boolean\");\n\n                    checkBoxElement = (\n                        <p className=\"form-control-plaintext\">\n                            {\n                                staticRenderer(fieldValue)\n                            }\n                            {\n                                label\n                            }\n                        </p>\n                    )\n                }\n                else\n                {\n\n                    checkBoxElement = (\n                        <div className=\"form-check\">\n                            <input\n                                id={ fieldId }\n                                name={ qualifiedName }\n                                className={ cx(inputClass, \"form-check-input\") }\n                                type=\"checkbox\"\n                                title={ title }\n                                checked={ fieldValue }\n                                onChange={ formikProps.handleChange }\n                                onBlur={ formikProps.handleBlur }\n                                disabled={ effectiveMode === FieldMode.DISABLED }\n                            />\n                            <label\n                                htmlFor={ fieldId }\n                                className={ cx(\"form-check-label\", labelClass) }>\n                                {\n                                    label\n                                }\n                            </label>\n                        </div>\n                    );\n                }\n\n                return (\n                    <FormGroup\n                        { ... ctx }\n                        label=\"\"\n                    >\n                        {\n                            checkBoxElement\n                        }\n                    </FormGroup>\n                );\n            }\n        },\n\n        {\n            rule: { kind: \"ENUM\" },\n\n            // ENUM SELECT\n\n            render: ctx => {\n\n                const {\n                    fieldId,\n                    name,\n                    mode,\n                    inputClass,\n                    placeholder,\n                    formConfig,\n                    fieldType,\n                    title,\n                    path,\n                    qualifiedName\n                } = ctx;\n\n                const { formikProps } = formConfig;\n\n\n                const effectiveMode = mode || formConfig.options.mode;\n\n                const errorMessage = get(formikProps.errors, path);\n\n                const fieldValue = get(formikProps.values, path);\n\n                let fieldElement;\n                if (effectiveMode === FieldMode.READ_ONLY)\n                {\n                    fieldElement = renderStatic(fieldType, inputClass, fieldValue);\n                }\n                else\n                {\n                    const actualType = unwrapNonNull(fieldType);\n\n                    const enumType = formConfig.schema.getType(actualType.name);\n\n                    fieldElement = (\n                        <select\n                            id={fieldId}\n                            name={qualifiedName}\n                            className={cx(inputClass, \"form-control\", errorMessage && \"is-invalid\")}\n                            title={title}\n                            disabled={effectiveMode === FieldMode.DISABLED}\n                            value={fieldValue}\n                            onChange={formikProps.handleChange}\n                            onBlur={formikProps.handleBlur}\n                        >\n                            {\n                                enumType.enumValues.map(enumValue =>\n                                    <option key={ enumValue.name }>\n                                        {\n                                            enumValue.name\n                                        }\n                                    </option>\n                                )\n                            }\n\n                        </select>\n                    );\n                }\n\n                return (\n                    <FormGroup\n                        { ... ctx }\n                        errorMessage={ errorMessage }\n                    >\n                        {\n                            fieldElement\n                        }\n                    </FormGroup>\n                )\n            }\n        },\n\n        {\n            // DEFAULT RULE\n            rule: false,\n\n            /**\n             *\n             * @param {FieldRenderContext} ctx\n             * @returns {*}\n             */\n            render: ctx => {\n\n                const {\n                    fieldId,\n                    name,\n                    mode,\n                    inputClass,\n                    placeholder,\n                    formConfig,\n                    fieldType,\n                    title,\n                    path,\n                    qualifiedName\n                } = ctx;\n\n                const { currency, currencyAddonRight, mode : modeFromOptions } = formConfig.options;\n                const effectiveMode = mode || modeFromOptions;\n\n                const { formikProps } = formConfig;\n\n\n                const errorMessage = get(formikProps.errors, path);\n\n                const fieldValue = get(formikProps.values, path);\n                //console.log({formikProps, fieldValue});\n\n                let fieldElement;\n                if (effectiveMode === FieldMode.READ_ONLY)\n                {\n                    fieldElement = renderStatic(fieldType, inputClass, fieldValue);\n                }\n                else\n                {\n                    fieldElement = (\n                        <input\n                            id={ fieldId }\n                            name={ qualifiedName }\n                            className={ cx(inputClass, \"form-control\", errorMessage && \"is-invalid\") }\n                            type=\"text\"\n                            placeholder={ placeholder }\n                            title={ title }\n                            disabled={ effectiveMode === FieldMode.DISABLED }\n                            value={ fieldValue }\n                            onChange={ formikProps.handleChange }\n                            onBlur={ formikProps.handleBlur }\n                        />\n                    );\n\n                    if (fieldType.name === \"Currency\")\n                    {\n                        if (currencyAddonRight)\n                        {\n                            fieldElement = (\n                                <div className=\"input-group mb-3\">\n                                    {\n                                        fieldElement\n                                    }\n                                    <span className=\"input-group-append\">\n                                        <span className=\"input-group-text\">\n                                        {\n                                            currency\n                                        }\n                                        </span>\n                                    </span>\n                                </div>\n                            );\n                        }\n                        else\n                        {\n\n                            fieldElement = (\n                                <div className=\"input-group mb-3\">\n                                <span className=\"input-group-prepend\">\n                                    <span className=\"input-group-text\">\n                                    {\n                                        currency\n                                    }\n                                    </span>\n                                </span>\n                                    {\n                                        fieldElement\n                                    }\n                                </div>\n                            );\n                        }\n                    }\n                }\n\n                return (\n                    <FormGroup\n                        { ... ctx }\n                        errorMessage={ errorMessage }\n                    >\n                        {\n                            fieldElement\n                        }\n                    </FormGroup>\n                )\n            }\n        }\n    ];\n\nexport default DEFAULT_RENDERERS\n"]}