{"version":3,"sources":["../src/GlobalErrors.js"],"names":["getFieldId","form","name","elem","querySelector","getAttribute","pushErrors","errorList","value","Array","isArray","i","length","e","hasOwnProperty","push","errorMessage","fieldId","GlobalErrors","state","getDerivedStateFromProps","props","errors","formConfig","formikProps","linearizeErrors","_listElem","setState","prevProps","prevState","prevErrors","heading","headingText","text","display","React","createElement","map","entry","nextProps","current","next","component","tagName","parentNode","Component","propTypes","PropTypes","string","defaultProps"],"mappings":"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","file":"GlobalErrors.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport withFormConfig from \"./withFormConfig\";\n\nfunction getFieldId(form, name)\n{\n    if (!form)\n    {\n        return null;\n    }\n\n    const elem = form.querySelector(\"[name='\" + name + \"']\");\n    return elem && elem.getAttribute(\"id\");\n}\n\nfunction pushErrors(errorList, value, name, form)\n{\n    if (!value)\n    {\n        return;\n    }\n\n    if (value && typeof value === \"object\")\n    {\n        if (Array.isArray(value))\n        {\n            for (let i = 0; i < value.length; i++)\n            {\n                const e = value[i];\n\n                pushErrors(errorList, e, name + \".\" + i)\n            }\n        }\n        else\n        {\n            for (let name in value)\n            {\n                if (value.hasOwnProperty(name))\n                {\n                    const e = value[name];\n\n                    pushErrors(errorList, e, name + \".\" + name)\n                }\n            }\n        }\n    }\n    else\n    {\n        errorList.push({\n            name,\n            errorMessage: value,\n            fieldId: getFieldId(form, name)\n        })\n    }\n}\n\nclass GlobalErrors extends React.Component {\n\n\n    static propTypes={\n        /**\n         * Text to use as heading (empty = no heading).\n         */\n        headingText: PropTypes.string,\n        /**\n         * Additional text below the headline\n         */\n        text: PropTypes.string,\n        /**\n         * Tag to surround the errors heading with\n         */\n        heading: PropTypes.string\n    };\n    static defaultProps={\n        headingText: \"Errors\",\n        text: null,\n        heading: \"h3\"\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState)\n    {\n        //console.log(\"GlobalErrors.getDerivedStateFromProps\", {nextProps, prevState});\n\n        const current = prevState ? prevState.errors : null;\n        const { errors : next } = nextProps.formConfig.formikProps;\n\n        if (!next || (prevState && current === next) )\n        {\n            return null;\n        }\n\n        //console.log(\"Linearize errors\", next);\n\n        const errorList = GlobalErrors.linearizeErrors( next, null);\n\n        return {\n            errorList,\n            errors : next\n        }\n\n    }\n\n    componentDidMount()\n    {\n        const { errors } = this.props.formConfig.formikProps;\n        if (errors)\n        {\n            const errorList = GlobalErrors.linearizeErrors(errors, this._listElem);\n            this.setState({\n                errorList\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState)\n    {\n        const { errors : prevErrors } = prevProps.formConfig.formikProps;\n        const { errors } = this.props.formConfig.formikProps;\n\n        if( prevErrors !== errors )\n        {\n            const errorList = GlobalErrors.linearizeErrors(errors, this._listElem);\n\n            this.setState({\n                errorList,\n                errors\n            });\n        }\n    }\n\n    static linearizeErrors(errors, component)\n    {\n        let form = null;\n        if (component)\n        {\n            form = component;\n            while (form.tagName !== \"FORM\")\n            {\n                form = form.parentNode;\n            }\n        }\n\n        const errorList = [];\n\n        for (let name in errors)\n        {\n            if (errors.hasOwnProperty(name))\n            {\n                const value = errors[name];\n\n                pushErrors(errorList, value, name, form);\n            }\n        }\n\n        return errorList;\n    }\n\n    state = GlobalErrors.getDerivedStateFromProps(this.props);\n\n    render()\n    {\n        const { heading, headingText, text } = this.props;\n        const { errorList } = this.state;\n\n        //console.log({errorList});\n\n        return (\n            <div className=\"global-errors\" style={{\n                display: !errorList.length ? \"none\" : null\n            }}>\n                {\n                    headingText && React.createElement( heading, null, headingText)\n                }\n                {\n                    text &&\n                    <p>\n                    {\n                        text\n                    }\n                    </p>\n                }\n                <ul\n                    ref={ elem => this._listElem = elem }\n                >\n                    {\n                        errorList.map( entry => (\n                            <li key={ entry.name }>\n                                <label htmlFor={ entry.fieldId } className=\"text-danger\">\n                                    {\n                                        entry.errorMessage\n                                    }\n                                </label>\n                            </li>\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default withFormConfig(GlobalErrors)\n"]}