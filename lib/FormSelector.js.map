{"version":3,"sources":["../src/FormSelector.js"],"names":["FormSelector","state","selectedIndex","selectRow","setState","index","props","selector","emptyText","children","array","ctx","path","arrayHelpers","renderToolbar","renderRowToolbar","createLineContext","len","length","last","map","elem","isActive","label","ev","preventDefault","React","Component","propTypes","name","PropTypes","string","isRequired","canRemove","bool","canSort","addLabel","removeCheck","minObjects","number","oneOfType","func","newObject","horizontal","FORM_CONFIG_PROP_TYPES","defaultProps"],"mappings":"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","file":"FormSelector.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport cx from \"classnames\";\nimport toPath from \"lodash.topath\";\nimport get from \"lodash.get\";\n\nimport ListHelper from \"./util/ListHelper\"\nimport FormConfig from \"./FormConfig\"\nimport FORM_CONFIG_PROP_TYPES from \"./FormConfigPropTypes\"\n\n/**\n * Helper to edit a list of complex input objects, similar to &lt;FormList/&gt;, it only edits one element at a time and\n * lets the user select from a list of elements.\n */\nclass FormSelector extends React.Component {\n\n    static propTypes = {\n\n        /**\n         * Name/path of the list field for this <FormSelector/>\n         */\n        name: PropTypes.string.isRequired,\n\n        /**\n         * If true (the default), the user can remove objects as long as there are more than \"minObjects\" objects. If false\n         * the user can never remove objects.\n         */\n        canRemove: PropTypes.bool,\n\n        /**\n         * If true (the default), the user can sort the list of objects with up and down buttons for each object.\n         */\n        canSort: PropTypes.bool,\n\n        /**\n         * Label to put on the add button (default is \"Add\")\n         */\n        addLabel: PropTypes.string,\n        /**\n         * Text of the remove object confirmation (default is \"Remove Object?\")\n         */\n        removeCheck: PropTypes.string,\n        /**\n         * Mininum number of objects in the list. (default is 0)\n         */\n        minObjects: PropTypes.number,\n\n        /**\n         * Field to select one object from the list of objects by. Can also be a function that renders a representation\n         * of a given object.\n         */\n        selector: PropTypes.oneOfType([\n            // field name/path within the array element type\n            PropTypes.string,\n            // function that renders the description for the array element\n            PropTypes.func\n        ]).isRequired,\n\n        /**\n         * optional factory method to produce new values. If no newObject prop is given, the user cannot add objects\n         * to the list.\n         */\n        newObject: PropTypes.func,\n        /**\n         * render additional elements into the list toolbar\n         */\n        renderToolbar: PropTypes.func,\n        /**\n         * render additional elements into the per row toolbars\n         */\n        renderRowToolbar: PropTypes.func,\n\n        /**\n         * Text to render if no rows are rendered.\n         */\n        emptyText: PropTypes.string,\n\n        /**\n         * Horizontal mode (default is true)\n         */\n        horizontal: PropTypes.string,\n\n        ... FORM_CONFIG_PROP_TYPES\n    };\n\n    static defaultProps = {\n        canRemove: true,\n        canSort: true,\n        minObjects: 0,\n        addLabel : \"Add\",\n        removeCheck : \"Remove Object?\",\n        emptyText: \"No Rows\",\n\n        // we use horizontal mode as non-inherited default in FormList.\n        horizontal: true\n    };\n\n\n    state = {\n        selectedIndex: 0\n    };\n\n    selectRow = index => this.setState({\n        selectedIndex: index\n    });\n\n    render()\n    {\n        const { selector, emptyText, children } = this.props;\n        const { selectedIndex } = this.state;\n\n        return (\n            <ListHelper\n                {...this.props}\n                selector={ null }\n            >\n                {\n                    ctx => {\n\n                        const { array, path, arrayHelpers, renderToolbar, renderRowToolbar, createLineContext  } = ctx;\n                        const len = array.length;\n                        const last = len - 1;\n\n                        return (\n                            <div className=\"form-selector\">\n                                {\n                                    renderToolbar(arrayHelpers)\n                                }\n                                <div className=\"row\">\n                                    <div className=\"col-md-3\">\n                                        {\n                                            len > 0 &&\n                                            <ul className=\"list-group\">\n                                                {\n                                                    array.map(\n                                                        (elem, index) => {\n\n                                                            const isActive = index === selectedIndex;\n\n                                                            const label = typeof selector === \"function\" ? selector(elem) : get(elem, toPath(selector));\n                                                            return (\n                                                                <li\n                                                                    key={index}\n                                                                    className={cx(\"list-group-item\", isActive && \"active\")}\n                                                                >\n                                                                    <a\n                                                                        className={cx(\"selector btn btn-link\", isActive && \"disabled\")}\n                                                                        aria-disabled={ isActive }\n                                                                        onClick={ev => {\n                                                                            this.selectRow(index);\n                                                                            ev.preventDefault();\n                                                                        }}\n                                                                    >\n                                                                        {\n                                                                            label || \"<empty>\"\n                                                                        }\n                                                                    </a>\n                                                                    <div className=\"float-right\">\n                                                                        {\n                                                                            renderRowToolbar(arrayHelpers, index, last)\n                                                                        }\n                                                                    </div>\n                                                                </li>\n                                                            );\n                                                        }\n                                                    )\n                                                }\n                                            </ul>\n                                        }\n                                        {\n                                            len === 0 &&\n                                            <React.Fragment>\n                                                { emptyText }\n                                                <hr/>\n                                            </React.Fragment>\n                                        }\n                                    </div>\n                                    {\n                                        selectedIndex < len &&\n                                        <FormConfig.Provider\n                                            key={ selectedIndex }\n                                            value={createLineContext(selectedIndex, path)}\n                                        >\n                                            <div className=\"col-md-9\">\n                                                <div className=\"container-fluid\">\n                                                    {\n                                                        typeof children === \"function\" ? children(selectedIndex, arrayHelpers) : children\n                                                    }\n                                                </div>\n\n                                            </div>\n                                        </FormConfig.Provider>\n                                    }\n                                </div>\n                            </div>\n                        );\n                    }\n                }\n            </ListHelper>\n        );\n    }\n}\n\nexport default FormSelector\n"]}