{"version":3,"sources":["../src/FormConfigProvider.js"],"names":["FormConfigProvider","state","getDerivedStateFromProps","props","children","formConfig","nextProps","prevState","FormConfig","schema","equals","React","Component","propTypes","PropTypes","oneOfType","instanceOf","InputSchema","object","FORM_CONFIG_PROP_TYPES"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;;;;;;;AAGA;;;IAGMA,kB;;;;;;;;;;;;;;kNAEFC,K,GAAQD,mBAAmBE,wBAAnB,CAA4C,MAAKC,KAAjD,EAAwD,IAAxD,C;;;;;iCA2BR;AAAA,gBACYC,QADZ,GACyB,KAAKD,KAD9B,CACYC,QADZ;;;AAGI,mBACI;AAAC,oCAAD,CAAY,QAAZ;AAAA,kBAAqB,OAAQ,KAAKH,KAAL,CAAWI,UAAxC;AAEQD;AAFR,aADJ;AAOH;;;iDAzB+BE,S,EAAWC,S,EAC3C;AACI,gBAAMF,aAAa,IAAIG,oBAAJ,CAAeF,SAAf,EAA0BA,UAAUG,MAApC,CAAnB;;AAEA,gBAAIF,aAAaF,WAAWK,MAAX,CAAkBH,UAAUF,UAA5B,CAAjB,EACA;AACI,uBAAO,IAAP;AACH;;AAED,mBAAO;AACHA;AADG,aAAP;AAGH;;;;EA1B4BM,gBAAMC,S;;AAAjCZ,kB,CAIKa,S;AACH;AACAJ,YAAQK,oBAAUC,SAAV,CAAoB,CACxBD,oBAAUE,UAAV,CAAqBC,qBAArB,CADwB,EAExBH,oBAAUI,MAFc,CAApB;GAKJC,6B;kBA+BGnB,kB","file":"FormConfigProvider.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport FormConfig from \"./FormConfig\"\nimport FORM_CONFIG_PROP_TYPES from \"./FormConfigPropTypes\"\n\nimport InputSchema from \"./InputSchema\";\n\n\n/**\n * Allows the definition defaults for form config options and schema at the top of the application component hierarchy.\n */\nclass FormConfigProvider extends React.Component {\n\n    state = FormConfigProvider.getDerivedStateFromProps(this.props, null);\n\n    static propTypes = {\n        // provides the input schema for all child <Form/> components.\n        schema: PropTypes.oneOfType([\n            PropTypes.instanceOf(InputSchema),\n            PropTypes.object\n        ]),\n        // default Form configaration properties for all child <Form/> components.\n        ... FORM_CONFIG_PROP_TYPES\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState)\n    {\n        const formConfig = new FormConfig(nextProps, nextProps.schema);\n\n        if (prevState && formConfig.equals(prevState.formConfig))\n        {\n            return null;\n        }\n\n        return {\n            formConfig\n        };\n    }\n\n    render()\n    {\n        const { children } = this.props;\n\n        return (\n            <FormConfig.Provider value={ this.state.formConfig }>\n                {\n                    children\n                }\n            </FormConfig.Provider>\n        )\n    }\n}\n\nexport default FormConfigProvider\n"]}