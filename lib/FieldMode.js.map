{"version":3,"sources":["../src/FieldMode.js"],"names":["FieldModeEnum","Enum","call","NORMAL","DISABLED","READ_ONLY","prototype","Object","create","constructor","disabledIf","cond","otherwise","FieldMode","readOnlyIf"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,SAASA,aAAT,GACA;AACIC,mBAAKC,IAAL,CAAU,IAAV,EAAgB;AACZC,gBAAS,IADG;AAEZC,kBAAW,IAFC;AAGZC,mBAAY;AAHA,KAAhB;AAKH;;AAEDL,cAAcM,SAAd,GAA0BC,OAAOC,MAAP,CAAcP,eAAKK,SAAnB,CAA1B;AACAN,cAAcM,SAAd,CAAwBG,WAAxB,GAAsCT,aAAtC;;AAEA;;;;;;;;;AASAA,cAAcM,SAAd,CAAwBI,UAAxB,GAAqC,UAAUC,IAAV,EAAkC;AAAA,QAAlBC,SAAkB,uEAAN,IAAM;;;AAEnE,WAAOD,OAAOE,UAAUT,QAAjB,GAA4BQ,SAAnC;AACH,CAHD;;AAKAZ,cAAcM,SAAd,CAAwBQ,UAAxB,GAAqC,UAAUH,IAAV,EAAkC;AAAA,QAAlBC,SAAkB,uEAAN,IAAM;;;AAEnE,WAAOD,OAAOE,UAAUR,SAAjB,GAA6BO,SAApC;AACH,CAHD;;AAKA;;;;;;AAMA,IAAMC,YAAY,IAAIb,aAAJ,EAAlB;;kBAEea,S","file":"FieldMode.js","sourcesContent":["import Enum from \"./util/enum\"\n\n// extend Enum prototype to add disabledIf/readOnlyIf\nfunction FieldModeEnum()\n{\n    Enum.call(this, {\n        NORMAL : true,\n        DISABLED : true,\n        READ_ONLY : true\n    });\n}\n\nFieldModeEnum.prototype = Object.create(Enum.prototype);\nFieldModeEnum.prototype.constructor = FieldModeEnum;\n\n/**\n * Returns DISABLED if the given condition is true or else the parameter \"otherwise\" which defaults to null, which\n * means taking the default of the surrounding form / block.\n *\n * @param cond          condition\n * @param otherwise     value to return for false (default is null = form / block default)\n *\n * @returns {String}\n */\nFieldModeEnum.prototype.disabledIf = function (cond, otherwise = null) {\n\n    return cond ? FieldMode.DISABLED : otherwise;\n};\n\nFieldModeEnum.prototype.readOnlyIf = function (cond, otherwise = null) {\n\n    return cond ? FieldMode.READ_ONLY : otherwise;\n};\n\n/**\n * Form field display mode\n *\n * @readonly\n * @enum {string}\n */\nconst FieldMode = new FieldModeEnum();\n\nexport default FieldMode\n"]}