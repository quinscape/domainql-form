{"version":3,"sources":["../src/StaticText.js"],"names":["StaticText","renderWithFormContext","props","name","value","type","schema","result","resultType","path","formConfig","getPath","resolveType","getType","GlobalConfig","renderStatic","nextProps","nextState","React","Component","propTypes","PropTypes","string","isRequired","any","oneOfType","array"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAGA;;;IAGMA,U;;;;;;;;;;;;;;kMAiCFC,qB,GAAwB,sBAAc;AAAA,8BACI,MAAKC,KADT;AAAA,gBAC1BC,IAD0B,eAC1BA,IAD0B;AAAA,gBACpBC,KADoB,eACpBA,KADoB;AAAA,gBACbC,IADa,eACbA,IADa;AAAA,gBACPC,MADO,eACPA,MADO;;;AAGlC,gBAAIC,eAAJ;AAAA,gBAAYC,mBAAZ;AACA,gBAAIL,IAAJ,EACA;AACI,oBAAMM,OAAOC,WAAWC,OAAX,CAAmBR,IAAnB,CAAb;AACAK,6BAAaF,OAAOM,WAAP,CAAmBF,WAAWL,IAA9B,EAAoCI,IAApC,CAAb;AACAF,yBAAS,sBAAIH,KAAJ,EAAWK,IAAX,CAAT;AACH,aALD,MAOA;AACID,6BAAaF,OAAOO,OAAP,CAAeR,IAAf,CAAb;AACAE,yBAASH,KAAT;AACH;;AAED,mBACIU,uBAAaC,YAAb,CAA0BP,WAAWL,IAArC,EAA2CI,MAA3C,CADJ;AAIH,S;;;;;8CA1CqBS,S,EAAWC,S,EAAW;AAAA,gBAEhCf,KAFgC,GAEtB,IAFsB,CAEhCA,KAFgC;;;AAIxC,mBACIA,MAAMG,IAAN,KAAeW,UAAUX,IAAzB,IACAH,MAAME,KAAN,KAAgBY,UAAUZ,KAD1B,IAEAF,MAAMC,IAAN,KAAea,UAAUb,IAH7B;AAKH;;;iCAGD;AACI,mBACI;AAAC,oCAAD,CAAY,QAAZ;AAAA;AAEQ,qBAAKF;AAFb,aADJ;AAOH;;;;EA/BoBiB,gBAAMC,S;;AAAzBnB,U,CAEKoB,S,GAAY;AACff,UAAMgB,oBAAUC,MAAV,CAAiBC,UADR;AAEfnB,WAAOiB,oBAAUG,GAFF;AAGfrB,UAAMkB,oBAAUI,SAAV,CAAoB,CACtBJ,oBAAUC,MADY,EAEtBD,oBAAUK,KAFY,CAApB;AAHS,C;kBAuDR1B,U","file":"StaticText.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport get from \"lodash.get\"\nimport GlobalConfig from \"./GlobalConfig\"\nimport FormConfig from \"./FormConfig\"\n\n\n/**\n * Helper to render a static value without form or form field.\n */\nclass StaticText extends React.Component {\n\n    static propTypes = {\n        type: PropTypes.string.isRequired,\n        value: PropTypes.any,\n        name: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.array\n        ])\n    };\n\n    shouldComponentUpdate(nextProps, nextState) {\n\n        const { props } = this;\n\n        return (\n            props.type !== nextProps.type ||\n            props.value !== nextProps.value ||\n            props.name !== nextProps.name\n        );\n    }\n\n    render()\n    {\n        return (\n            <FormConfig.Consumer>\n                {\n                    this.renderWithFormContext\n                }\n            </FormConfig.Consumer>\n        )\n    }\n\n    renderWithFormContext = formConfig => {\n        const { name, value, type, schema } = this.props;\n\n        let result, resultType;\n        if (name)\n        {\n            const path = formConfig.getPath(name);\n            resultType = schema.resolveType(formConfig.type, path);\n            result = get(value, path);\n        }\n        else\n        {\n            resultType = schema.getType(type);\n            result = value;\n        }\n\n        return (\n            GlobalConfig.renderStatic(resultType.name, result)\n        );\n\n    };\n\n}\n\nexport default StaticText\n"]}