{"version":3,"sources":["../src/ForeignKeySelect.js"],"names":["SelectorModal","props","isOpen","toggle","React","Component","renderAutoTable","renderStatic","fieldContext","displayValue","ForeignKeySelect","state","modalOpen","selectValues","selectValueKeys","nextOpenState","fetch","then","setState","renderWithFieldContext","render","display","renderDisplay","inputClass","placeholder","qualifiedName","path","fieldType","formConfig","formikProps","errorMessage","errors","fieldValue","values","displayPath","propTypes","name","PropTypes","string","isRequired","mode","oneOf","FieldMode","helpText","title","label","labelClass","func","defaultProps"],"mappings":"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","file":"ForeignKeySelect.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport FieldMode from \"./FieldMode\"\nimport FormGroup from \"./FormGroup\"\nimport Field from \"./Field\"\nimport get from \"lodash.get\";\nimport toPath from \"lodash.toPath\";\nimport cx from \"classnames\";\n\nimport {\n    Button,\n    Modal,\n    ModalBody,\n    ModalHeader\n} from \"reactstrap\"\n\nclass SelectorModal extends React.Component\n{\n    componentDidUpdate()\n    {\n\n    }\n\n    render()\n    {\n        const { isOpen, toggle } = this.props;\n\n        return (\n            <Modal\n                isOpen={ isOpen}\n                toggle={ toggle }\n\n            >\n                <ModalHeader toggle={ toggle}>Select Target Object</ModalHeader>\n                <ModalBody>\n                    <table className=\"table table-hover table-striped\">\n                        <thead>\n\n                        </thead>\n                        <tbody>\n                        {\n                            \n                        }\n                        </tbody>\n                    </table>\n\n                </ModalBody>\n            </Modal>\n        );\n    }\n}\n\n\nfunction renderAutoTable(props)\n{\n\n}\n\nfunction renderStatic(fieldContext, displayValue)\n{\n\n}\n\n/**\n * Edits a string GraphQL field with a text area element.\n *\n * This is a good example how to implement custom fields.\n */\nclass ForeignKeySelect extends React.Component {\n\n    static propTypes = {\n        /**\n         * Name / path for this field (e.g. \"name\", but also \"foos.0.name\")\n         */\n        name: PropTypes.string.isRequired,\n        /**\n         * Mode for this field. If not set or set to null, the mode will be inherited from the &lt;Form/&gt; or &lt;FormBlock&gt;.\n         */\n        mode: PropTypes.oneOf(FieldMode.values()),\n        /**\n         * Additional help text for this field. Is rendered for non-erroneous fields in place of the error.\n         */\n        helpText: PropTypes.string,\n        /**\n         * Title attribute\n         */\n        title: PropTypes.string,\n        /**\n         * Label for the field.\n         */\n        label: PropTypes.string,\n        /**\n         * Placeholder text to render for the empty text area.\n         */\n        placeholder: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the textarea element.\n         */\n        inputClass: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the label element.\n         */\n        labelClass: PropTypes.string,\n\n\n        /**\n         * Name/path to the display value\n         */\n        display: PropTypes.string,\n\n        /**\n         * Optional function to render the display value  (fieldContext, value) =>\n         */\n        renderDisplay: PropTypes.func,\n\n        /**\n         * Data fetching function. Must return a promise resolving to a List of values\n         */\n        fetch: PropTypes.func.isRequired,\n\n        /**\n         * Render function for the fetched values.\n         */\n        render: PropTypes.func,\n    };\n\n    static defaultProps = {\n\n        renderDisplay: renderStatic,\n        render: renderAutoTable\n    };\n\n    state = {\n        modalOpen: false,\n        selectValues: null,\n        selectValueKeys: null\n    };\n\n    toggle = () => {\n\n        const { modalOpen, selectValues } = this.state;\n\n        const nextOpenState = !modalOpen;\n\n        if (nextOpenState && !selectValues)\n        {\n            this.props.fetch().then( selectValues => this.setState({\n                selectValues,\n                modalOpen: nextOpenState\n            }));\n        }\n        else\n        {\n            this.setState({\n                modalOpen: nextOpenState\n            });\n        }\n    };\n\n    render()\n    {\n        return (\n            <Field\n                { ...this.props }\n\n            >\n                {\n                    this.renderWithFieldContext\n                }\n            </Field>\n        )\n    }\n\n    renderWithFieldContext = fieldContext => {\n\n        const { modalOpen, selectValues } = this.state;\n        const { fetch, render, display , renderDisplay, inputClass, placeholder } = this.props;\n        const { qualifiedName, path, fieldType, formConfig } = fieldContext;\n        const { formikProps } = formConfig;\n\n        const errorMessage = get(formikProps.errors, path);\n        const fieldValue = get(formikProps.values, path);\n\n        const displayPath = toPath(display);\n        const displayValue = get(formikProps.values, displayPath);\n\n        return (\n            <React.Fragment>\n                <FormGroup\n                    { ... fieldContext }\n                    errorMessage={ errorMessage }\n                >\n                    {\n                        renderDisplay(fieldContext, displayValue)\n                    }\n                    <button\n                        type=\"button\"\n                        onClick={ this.toggle }\n                    >\n                        &hellip;\n                    </button>\n                </FormGroup>\n                <SelectorModal\n                    isOpen={ modalOpen }\n                    toggle={ this.toggle }\n                    fieldContext={ fieldContext }\n                    selectValues={ selectValues }\n                    render={ render }\n                    current={ fieldValue }\n                />\n            </React.Fragment>\n        )\n    };\n}\n\nexport default ForeignKeySelect\n"]}