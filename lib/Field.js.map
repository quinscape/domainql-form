{"version":3,"sources":["../src/Field.js"],"names":["Field","renderWithFormConfig","props","id","name","label","children","type","formConfig","fieldId","qualifiedName","path","fieldType","effectiveLabel","length","getPath","lastSegment","schema","resolveType","options","lookupLabel","fieldContext","renderFn","GlobalConfig","get","React","Component","propTypes","PropTypes","string","isRequired","mode","oneOf","FieldMode","values","helpText","title","placeholder","inputClass","labelClass"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;;;AAGA;;;;IAIMA,K;;;;;;;;;;;;;;wLAkDFC,oB,GAAuB,sBAAc;AAAA,8BAEK,MAAKC,KAFV;AAAA,gBAEzBC,EAFyB,eAEzBA,EAFyB;AAAA,gBAErBC,IAFqB,eAErBA,IAFqB;AAAA,gBAEfC,KAFe,eAEfA,KAFe;AAAA,gBAERC,QAFQ,eAERA,QAFQ;AAAA,gBAIzBC,IAJyB,GAIfC,UAJe,CAIzBD,IAJyB;;;AAMjC,gBAAIE,gBAAJ;AACA,gBAAIC,sBAAJ;AACA,gBAAIC,aAAJ;AACA,gBAAIC,kBAAJ;AACA,gBAAIC,uBAAJ;;AAEA,gBAAIT,QAAQA,KAAKU,MAAjB,EACA;AACIJ,gCAAgBF,WAAWO,OAAX,CAAmBX,IAAnB,CAAhB;AACAO,uBAAO,sBAAOD,aAAP,CAAP;AACA,oBAAMM,cAAcL,KAAKA,KAAKG,MAAL,GAAc,CAAnB,CAApB;;AAEAL,0BAAUN,MAAM,WAAWI,IAAX,GAAkB,GAAlB,GAAwBS,WAAxC;;AAGAJ,4BAAYJ,WAAWS,MAAX,CAAkBC,WAAlB,CAA8BX,IAA9B,EAAoCI,IAApC,CAAZ;AACAE,iCAAiB,OAAOR,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCG,WAAWW,OAAX,CAAmBC,WAAnB,CAA+BZ,UAA/B,EAA2CQ,WAA3C,CAArD;AACH,aAXD,MAaA;AACIP,0BAAUN,EAAV;AACAO,gCAAgB,IAAhB;AACAC,uBAAO,IAAP;AACAC,4BAAY,IAAZ;AACAC,iCAAiBR,SAAS,EAA1B;AACH;;AAED,gBAAMgB;AACFb,sCADE;AAEFC,gCAFE;AAGFG,oCAHE;AAIFF,4CAJE;AAKFC,0BALE;AAMFN,uBAAOQ;AANL,eAOE,MAAKX,KAPP,CAAN;;AAUA,gBAAI,OAAOI,QAAP,KAAoB,UAAxB,EACA;AACI,uBAAOA,SAASe,YAAT,CAAP;AACH,aAHD,MAKA;AACI,oBAAMC,WAAWC,uBAAaC,GAAb,CAAiBH,YAAjB,CAAjB;AACA,uBAAOC,SAASD,YAAT,CAAP;AACH;AACJ,S;;;;;iCA9DD;AACI,mBACI;AAAC,oCAAD,CAAY,QAAZ;AAAA;AAEQ,qBAAKpB;AAFb,aADJ;AAOH;;;;EAhDewB,gBAAMC,S;;AAApB1B,K,CAEK2B,S,GAAY;AACf;;;AAGAvB,UAAMwB,oBAAUC,MAAV,CAAiBC,UAJR;AAKf;;;AAGAC,UAAMH,oBAAUI,KAAV,CAAgBC,oBAAUC,MAAV,EAAhB,CARS;AASf;;;AAGAC,cAAUP,oBAAUC,MAZL;AAaf;;;AAGAO,WAAOR,oBAAUC,MAhBF;AAiBf;;;AAGAxB,WAAOuB,oBAAUC,MApBF;AAqBf;;;AAGAQ,iBAAaT,oBAAUC,MAxBR;;AA0Bf;;;AAGAS,gBAAYV,oBAAUC,MA7BP;;AA+Bf;;;AAGAU,gBAAYX,oBAAUC;AAlCP,C;kBAwGR7B,K","file":"Field.js","sourcesContent":["import React from \"react\"\nimport toPath from \"lodash.topath\"\n\nimport GlobalConfig from \"./GlobalConfig\"\nimport FormConfig from \"./FormConfig\"\n\nimport PropTypes from \"prop-types\"\n\nimport FieldMode from \"./FieldMode\"\n\n\n/**\n * Renders a bootstrap 4 form group with an input field for the given name/path within the current form object. The actual\n * field rendered is resolved by the render rules in GlobalConfig.js ( See [\"Form Customization\"](./customization.md) for details)\n */\nclass Field extends React.Component {\n\n    static propTypes = {\n        /**\n         * Name / path for this field (e.g. \"name\", but also \"foos.0.name\")\n         */\n        name: PropTypes.string.isRequired,\n        /**\n         * Mode for this field. If not set or set to null, the mode will be inherited from the &lt;Form/&gt; or &lt;FormBlock&gt;.\n         */\n        mode: PropTypes.oneOf(FieldMode.values()),\n        /**\n         * Additional help text for this field. Is rendered for non-erroneous fields in place of the error.\n         */\n        helpText: PropTypes.string,\n        /**\n         * Title attribute\n         */\n        title: PropTypes.string,\n        /**\n         * Label for the field.\n         */\n        label: PropTypes.string,\n        /**\n         * Placeholder text to render for text inputs.\n         */\n        placeholder: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the input element.\n         */\n        inputClass: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the label element.\n         */\n        labelClass: PropTypes.string\n    };\n\n    render()\n    {\n        return (\n            <FormConfig.Consumer>\n                {\n                    this.renderWithFormConfig\n                }\n            </FormConfig.Consumer>\n        )\n    }\n\n    renderWithFormConfig = formConfig => {\n\n        const { id, name, label, children } = this.props;\n\n        const { type }  = formConfig;\n\n        let fieldId;\n        let qualifiedName;\n        let path;\n        let fieldType;\n        let effectiveLabel;\n\n        if (name && name.length)\n        {\n            qualifiedName = formConfig.getPath(name);\n            path = toPath(qualifiedName);\n            const lastSegment = path[path.length - 1];\n\n            fieldId = id || \"field-\" + type + \"-\" + lastSegment;\n\n\n            fieldType = formConfig.schema.resolveType(type, path);\n            effectiveLabel = typeof label === \"string\" ? label : formConfig.options.lookupLabel(formConfig, lastSegment);\n        }\n        else\n        {\n            fieldId = id;\n            qualifiedName = null;\n            path = null;\n            fieldType = null;\n            effectiveLabel = label || \"\";\n        }\n\n        const fieldContext = {\n            formConfig,\n            fieldId,\n            fieldType,\n            qualifiedName,\n            path,\n            label: effectiveLabel,\n            ... this.props\n        };\n\n        if (typeof children === \"function\")\n        {\n            return children(fieldContext);\n        }\n        else\n        {\n            const renderFn = GlobalConfig.get(fieldContext);\n            return renderFn(fieldContext);\n        }\n    };\n\n}\n\nexport default Field\n"]}