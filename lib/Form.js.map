{"version":3,"sources":["../src/Form.js"],"names":["getSchema","formConfig","props","schemaFromProps","schema","Error","InnerForm","state","getDerivedStateFromProps","onSubmit","values","actions","type","converted","fromValues","e","console","error","validate","errors","localErrors","children","formikProps","submitCount","handleSubmit","handleReset","nextProps","prevState","parentConfig","FormConfig","mergeOptions","options","setFormContext","equals","React","Component","Form","_innerForm","_component","getFormikBag","validateForm","value","initialValues","isInitialValid","initial","toValues","c","propTypes","PropTypes","func","isRequired","oneOfType","instanceOf","InputSchema","object","string","any","bool","FORM_CONFIG_PROP_TYPES","defaultProps"],"mappings":"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","file":"Form.js","sourcesContent":["import React from \"react\"\nimport cx from \"classnames\"\nimport assign from \"object-assign\"\n\nimport { Formik } from \"formik\"\n\nimport PropTypes from \"prop-types\"\nimport FormConfig from \"./FormConfig\";\nimport InputSchema from \"./InputSchema\";\n\nimport FORM_CONFIG_PROP_TYPES from \"./FormConfigPropTypes\"\n\nfunction getSchema(formConfig, props)\n{\n    const { schema: schemaFromProps } = props;\n\n    const schema = (formConfig && formConfig.schema) || schemaFromProps;\n\n    if (!schema)\n    {\n        throw new Error(\"No schema prop given and no FormConfigProvider providing one either\");\n    }\n\n    return schema;\n}\n\n\n/**\n * \"Inner\" form component.\n *\n * Indirection created to have the two coalesced contexts as props.\n *\n */\nclass InnerForm extends React.Component {\n\n    static getDerivedStateFromProps(nextProps, prevState)\n    {\n        const { type, formikProps, formConfig: parentConfig } = nextProps;\n\n        const schema = getSchema(parentConfig, nextProps);\n\n        let formConfig;\n        if (parentConfig)\n        {\n            formConfig = new FormConfig(\n                FormConfig.mergeOptions(\n                    parentConfig.options,\n                    nextProps\n                ),\n                schema\n            );\n        }\n        else\n        {\n            formConfig = new FormConfig(\n                nextProps,\n                schema\n            );\n        }\n        formConfig.setFormContext(type, \"\", formikProps);\n\n        // did the form config actually change since last time?\n        if (prevState && prevState.formConfig.equals(formConfig))\n        {\n            // no -> no update\n\n            //console.log(\"NO UPDATE\");\n\n            return null;\n        }\n\n        //console.log(\"NEW formConfig\", formConfig, parentConfig);\n\n        // update form config in local state\n        return {\n            formConfig\n        };\n    }\n\n    state = InnerForm.getDerivedStateFromProps(this.props);\n\n    // called from outer form\n    // noinspection JSUnusedGlobalSymbols\n    onSubmit = (values, actions) => {\n\n        const { formConfig } = this.state;\n\n        const { schema, type } = formConfig;\n\n        const converted = schema.fromValues( type, values);\n\n        try\n        {\n            return this.props.onSubmit(converted, actions);\n        }\n        catch(e)\n        {\n            console.error(\"Error in onSubmit\", e);\n        }\n    };\n\n    // called from outer form\n    // noinspection JSUnusedGlobalSymbols\n    validate = (values) => {\n\n        const { formConfig } = this.state;\n\n        const { validate } = this.props;\n\n        const { schema, type } = formConfig;\n\n        const errors = schema.validate( type, values);\n\n        if (validate)\n        {\n            const localErrors = validate(values);\n            return assign({}, errors, localErrors);\n        }\n        return errors;\n    };\n\n\n    render()\n    {\n        const { children } = this.props;\n\n        const { formConfig } = this.state;\n        const { formikProps } = formConfig;\n\n        return (\n            <form\n                className={\n                    cx(\n                        \"form\",\n                        formikProps.submitCount > 0 && \"was-validated\"\n                    )\n                }\n                onSubmit={ formikProps.handleSubmit }\n                onReset={ formikProps.handleReset }\n            >\n                <FormConfig.Provider value={ formConfig }>\n                    {\n                        typeof children === \"function\" ? children(formConfig) : children\n                    }\n                </FormConfig.Provider>\n            </form>\n        );\n    }\n    \n\n}\n\n/**\n * Form description\n */\nclass Form extends React.Component {\n\n\n    static propTypes = {\n        /**\n         * Submit handler handling the final typed GraphQL result\n         */\n        onSubmit: PropTypes.func.isRequired,\n\n        /**\n         * schema to use for this form\n         */\n        schema: PropTypes.oneOfType([\n            PropTypes.instanceOf(InputSchema),\n            PropTypes.object\n        ]),\n\n        /**\n         * form base type\n         */\n        type: PropTypes.string.isRequired,\n\n        /**\n         * initial value (typed GraphQL object)\n         */\n        value: PropTypes.any.isRequired,\n\n        /**\n         * true if the initial value is valid\n         */\n        isInitialValid: PropTypes.bool,\n\n        /**\n         * Optional function to provide the initialValues for Formik without converting them from the typed GraphQL object.\n         * Might also be invalid (See isInitialValid)\n         */\n        initialValues: PropTypes.func,\n\n        /**\n         * Optional validate function. Note that the values object received here is *not* typed, i.e. it contains the\n         * raw formik string/boolean values. If you need all values to be converted to a typed GraphQL object, you\n         * need to invoke InputSchema.fromValues(type, values) manually on the received values object.\n         */\n        validate: PropTypes.func,\n\n        ... FORM_CONFIG_PROP_TYPES\n        \n    };\n\n    static defaultProps = {\n        // whether the initial state of the form is considered valid (passed to formik)\n        isInitialValid: true\n    };\n\n    componentDidMount()\n    {\n        this._component.getFormikBag().validateForm();\n    }\n\n    onSubmit = (values, actions) => this._innerForm.onSubmit(values, actions);\n    validate = (values) => this._innerForm.validate(values);\n\n    render()\n    {\n        const {value, type, initialValues, isInitialValid, children } = this.props;\n\n        return (\n            <FormConfig.Consumer>\n                {\n                    formConfig => {\n\n\n                        const schema = getSchema(formConfig , this.props);\n\n                        const initial = initialValues != null ? initialValues() : schema.toValues(type, value);\n                        //console.log(\"RENDER OUTER\", formConfig, initial);\n\n                        return (\n                            <Formik\n                                ref={c => this._component = c}\n                                isInitialValid={ isInitialValid }\n                                initialValues={ initial }\n                                validate={ this.validate }\n                                onSubmit={ this.onSubmit }\n                                render={\n                                    formikProps => (\n                                        <InnerForm\n                                            {...this.props}\n                                            ref={ c => this._innerForm = c }\n                                            formConfig={formConfig}\n                                            formikProps={formikProps}\n                                        >\n                                            {\n                                                children\n                                            }\n                                        </InnerForm>\n                                    )\n                                }\n                            />\n                        );\n                    }\n                }\n            </FormConfig.Consumer>\n        );\n    }\n}\n\n/**\n * Globally change the currency  default\n *\n * @param currency              currency symbol\n * @param currencyAddonRight    displayed on the right?\n */\n// export function setCurrencyDefaults(currency, currencyAddonRight)\n// {\n//     GQLForm.defaultProps.currency = currency;\n//     GQLForm.defaultProps.currencyAddonRight = currencyAddonRight;\n// }\n\nexport default Form\n"]}