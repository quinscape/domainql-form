{"version":3,"sources":["../src/Select.js"],"names":["Select","handleChange","fieldContext","ev","onChange","props","isDefaultPrevented","formConfig","formikProps","renderWithFieldContext","values","inputClass","required","path","qualifiedName","errorMessage","errors","fieldValue","noneText","GlobalConfig","none","handleBlur","map","name","value","v","React","Component","propTypes","PropTypes","string","isRequired","mode","oneOf","FieldMode","helpText","title","label","placeholder","labelClass","array","func","bool","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;IAGMA,M;;;;;;;;;;;;;;0LA6DFC,Y,GAAe,UAACC,YAAD,EAAeC,EAAf,EAAsB;AAAA,gBAEzBC,QAFyB,GAEZ,MAAKC,KAFO,CAEzBD,QAFyB;;;AAIjC,gBAAIA,QAAJ,EACA;AACIA,yBAASD,EAAT,EAAaD,YAAb;AACH;;AAED,gBAAI,CAACC,GAAGG,kBAAH,EAAL,EACA;AACI,uBAAOJ,aAAaK,UAAb,CAAwBC,WAAxB,CAAoCP,YAApC,CAAiDE,EAAjD,CAAP;AACH;AACJ,S,QAiBDM,sB,GAAyB,wBAAgB;AACrC;;AADqC,8BAGI,MAAKJ,KAHT;AAAA,gBAG7BK,MAH6B,eAG7BA,MAH6B;AAAA,gBAGrBC,UAHqB,eAGrBA,UAHqB;AAAA,gBAGTC,QAHS,eAGTA,QAHS;AAAA,gBAI7BL,UAJ6B,GAIOL,YAJP,CAI7BK,UAJ6B;AAAA,gBAIjBM,IAJiB,GAIOX,YAJP,CAIjBW,IAJiB;AAAA,gBAIXC,aAJW,GAIOZ,YAJP,CAIXY,aAJW;AAAA,gBAM7BN,WAN6B,GAMbD,UANa,CAM7BC,WAN6B;;;AAQrC,gBAAMO,eAAe,sBAAIP,YAAYQ,MAAhB,EAAwBH,IAAxB,CAArB;AACA,gBAAMI,aAAa,sBAAIT,YAAYE,MAAhB,EAAwBG,IAAxB,CAAnB;;AAEA,gBAAMK,WAAWC,uBAAaC,IAAb,EAAjB;;AAGA,mBACI;AAAC,mCAAD;AAAA,6BACUlB,YADV;AAEI,kCAAea;AAFnB;AAII;AAAA;AAAA;AACI,mCACI,0BACIJ,UADJ,EAEI,cAFJ,EAGII,gBAAgB,YAHpB,CAFR;AAQI,8BAAOD,aARX;AASI,+BAAQG,UATZ;AAUI,kCAAW;AAAA,mCAAM,MAAKhB,YAAL,CAAkBC,YAAlB,EAAgCC,EAAhC,CAAN;AAAA,yBAVf;AAWI,gCAASK,YAAYa;AAXzB;AAcQ,qBAACT,QAAD,IAAa;AAAA;AAAA,0BAAQ,KAAI,EAAZ,EAAe,OAAM,EAArB;AAA0BM;AAA1B,qBAdrB;AAiBQR,2BAAOY,GAAP,CAAW,aAAK;;AAEZ,4BAAIC,aAAJ;AAAA,4BAAUC,cAAV;AACA,4BAAI,OAAOC,CAAP,KAAa,QAAjB,EACA;AACIF,mCAAOE,CAAP;AACAD,oCAAQC,CAAR;AACH,yBAJD,MAMA;AACIF,mCAAOE,EAAEF,IAAT;AACAC,oCAAQC,EAAED,KAAV;AACH;;AAGD,+BACI;AAAA;AAAA;AACI,qCAAKA,KADT;AAEI,uCAAOA;AAFX;AAKQD;AALR,yBADJ;AAUH,qBAzBD;AAjBR;AAJJ,aADJ;AAoDH,S;;;;;iCAhFD;AACI,mBACI;AAAC,+BAAD;AAAA,6BACS,KAAKlB,KADd;AAEI,4BAAS;AAFb;AAMQ,qBAAKI;AANb,aADJ;AAWH;;;;EAzFgBiB,gBAAMC,S;;AAArB3B,M,CAEK4B,S,GAAY;;AAEf;;;AAGAL,UAAMM,oBAAUC,MAAV,CAAiBC,UALR;AAMf;;;AAGAC,UAAMH,oBAAUI,KAAV,CAAgBC,oBAAUxB,MAAV,EAAhB,CATS;AAUf;;;AAGAyB,cAAUN,oBAAUC,MAbL;AAcf;;;AAGAM,WAAOP,oBAAUC,MAjBF;AAkBf;;;AAGAO,WAAOR,oBAAUC,MArBF;AAsBf;;;AAGAQ,iBAAaT,oBAAUC,MAzBR;;AA2Bf;;;AAGAnB,gBAAYkB,oBAAUC,MA9BP;;AAgCf;;;AAGAS,gBAAYV,oBAAUC,MAnCP;;AAqCf;;;;;AAKApB,YAAQmB,oBAAUW,KAAV,CAAgBT,UA1CT;;AA4Cf;;;AAGA3B,cAAUyB,oBAAUY,IA/CL;;AAiDf;;;AAGA7B,cAAUiB,oBAAUa;AApDL,C;AAFjB1C,M,CAyDK2C,Y,GAAe;AAClB/B,cAAW;AADO,C;kBAuGX,8BAAeZ,MAAf,C","file":"Select.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport FieldMode from \"./FieldMode\"\nimport FormGroup from \"./FormGroup\"\nimport GlobalConfig from \"./GlobalConfig\"\nimport withFormConfig from \"./withFormConfig\"\nimport Field from \"./Field\"\nimport get from \"lodash.get\";\nimport cx from \"classnames\";\n\n/**\n * Allows selection from a list of string values for a target field.\n */\nclass Select extends React.Component {\n\n    static propTypes = {\n\n        /**\n         * Name / path for this field (e.g. \"name\", but also \"foos.0.name\")\n         */\n        name: PropTypes.string.isRequired,\n        /**\n         * Mode for this field. If not set or set to null, the mode will be inherited from the &lt;Form/&gt; or &lt;FormBlock&gt;.\n         */\n        mode: PropTypes.oneOf(FieldMode.values()),\n        /**\n         * Additional help text for this field. Is rendered for non-erroneous fields in place of the error.\n         */\n        helpText: PropTypes.string,\n        /**\n         * Title attribute\n         */\n        title: PropTypes.string,\n        /**\n         * Label for the field.\n         */\n        label: PropTypes.string,\n        /**\n         * Placeholder text to render for the empty text area.\n         */\n        placeholder: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the textarea element.\n         */\n        inputClass: PropTypes.string,\n\n        /**\n         * Additional HTML classes for the label element.\n         */\n        labelClass: PropTypes.string,\n\n        /**\n         * Array of values to offer to the user. If required is false, &lt;Select/&gt; will add an empty option.\n         *\n         * The values can be either a string or an object with `name` and `value` property.\n         */\n        values: PropTypes.array.isRequired,\n\n        /**\n         * Local change handler. can call ev.preventDefault() to cancel change.\n         */\n        onChange: PropTypes.func,\n\n        /**\n         * If true, the user must select one of the given values, if false, the user will also be given an empty option.\n         */\n        required: PropTypes.bool\n    };\n\n    static defaultProps = {\n        required:  false\n    };\n\n    handleChange = (fieldContext, ev) => {\n\n        const { onChange } = this.props;\n\n        if (onChange)\n        {\n            onChange(ev, fieldContext);\n        }\n\n        if (!ev.isDefaultPrevented())\n        {\n            return fieldContext.formConfig.formikProps.handleChange(ev);\n        }\n    };\n\n    render()\n    {\n        return (\n            <Field\n                { ...this.props }\n                values={ null }\n            >\n\n                {\n                    this.renderWithFieldContext\n                }\n            </Field>\n        )\n    }\n\n    renderWithFieldContext = fieldContext => {\n        //console.log(\"render Select\", fieldContext);\n\n        const { values, inputClass, required } = this.props;\n        const { formConfig, path, qualifiedName } = fieldContext;\n\n        const { formikProps } = formConfig;\n\n        const errorMessage = get(formikProps.errors, path);\n        const fieldValue = get(formikProps.values, path);\n\n        const noneText = GlobalConfig.none();\n\n\n        return (\n            <FormGroup\n                { ... fieldContext }\n                errorMessage={ errorMessage }\n            >\n                <select\n                    className={\n                        cx(\n                            inputClass,\n                            \"form-control\",\n                            errorMessage && \"is-invalid\"\n                        )\n                    }\n                    name={ qualifiedName }\n                    value={ fieldValue }\n                    onChange={ ev => this.handleChange(fieldContext, ev) }\n                    onBlur={ formikProps.handleBlur }\n                >\n                    {\n                        !required && <option key=\"\" value=\"\">{ noneText }</option>\n                    }\n                    {\n                        values.map(v => {\n\n                            let name, value;\n                            if (typeof v === \"string\")\n                            {\n                                name = v;\n                                value = v;\n                            }\n                            else\n                            {\n                                name = v.name;\n                                value = v.value;\n                            }\n\n\n                            return (\n                                <option\n                                    key={value}\n                                    value={value}\n                                >\n                                    {\n                                        name\n                                    }\n                                </option>\n                            );\n                        })\n                    }\n                </select>\n            </FormGroup>\n        )\n    };\n}\n\nexport default withFormConfig(Select)\n"]}